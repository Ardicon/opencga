{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "_artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": ""
            }
        },
        "_artifactsLocationSasToken": {
            "type": "string",
            "metadata": {
                "description": ""
            }
        },
        "deploymentSize": {
            "type": "int",
            "allowedValues": [
                0,
                1,
                2,
                3
            ],
            "defaultValue": 1,
            "metadata": {
                "description": "What size of deployment do you want? 0 = For single researches testing things out. 1 = For x genomics with xgb per sec load rate. 2 = is for x/y"
            }
        },
        "rgPrefix": {
            "type": "string",
            "metadata": {
                "description": "The resource group prefix"
            }
        },
        "rgLocation": {
            "type": "string",
            "defaultValue": "UK South",
            "metadata": {
                "description": "Location for deployment"
            }
        },
        "HDInsightStorageOption": {
            "type": "string",
            "allowedValues": [
                "DataLake",
                "Blob"
            ],
            "defaultValue": "DataLake",
            "metadata": {
                "description": "What type of storage will be used"
            }
        },
        "openCGAContainerImage": {
            "type": "string",
            "metadata": {
                "description": "The docker image and tag for running the OpenCGA service. For examples: 'repo/image:tag'"
            }
        },
        "batchContainerImage": {
            "type": "string",
            "metadata": {
                "description": "The docker image and tag for running the batch jobs. For examples: 'repo/image:tag'"
            }
        },
        "ivaContainerImage": {
            "type": "string",
            "metadata": {
                "description": "The docker image and tag for running the IVA service. For examples: 'repo/image:tag'"
            }
        },
        "solrDiskSizeGB": {
            "type": "int",
            "defaultValue": 512,
            "metadata": {
                "description": "Size of the data disk for Solr."
            }
        },
        "zookeeperVMSize": {
            "type": "string",
            "defaultValue": "Standard_D2_v2",
            "metadata": {
                "description": "Size of the zookeeper VM"
            }
        },
        "solrDiskType": {
            "type": "string",
            "defaultValue": "StandardSSD_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Premium_LRS",
                "StandardSSD_LRS"
            ],
            "metadata": {
                "description": "Storage Account type"
            }
        },
        "initContainerImage": {
            "type": "string",
            "metadata": {
                "description": "The init container image to run"
            }
        },
        "daemonContainerImage": {
            "type": "string",
            "metadata": {
                "description": "The daemon container image to run"
            }
        },
        "mongoCertificateEmail": {
            "type": "string",
            "metadata": {
                "description": "Email address used for mongoDB letsencrypt certificates"
            }
        },
        "nfsCsvServerList": {
            "type": "string",
            "metadata": {
                "description": "A list of NFS servers to use for storage throughout OpenCGA. Nodes will be evenly distributed between servers to spread load if multiple servers are provided. NOTE> This parameter is required for deployment sizes > 1"
            },
            "defaultValue": ""
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "opencgaadmin",
            "metadata": {
                "description": "Admin username used by various services"
            }
        },
        "sshAdminKeyData": {
            "type": "securestring",
            "metadata": {
                "description": "The RSA data for the SSH Public Key used to authenticate the following machines: WebServers, DaemonVM, Mongo, Solr and Zookeeper."
            }
        },
        "mongoDBPassword": {
            "type": "securestring",
            "metadata": {
                "description": "This Data is used to derive unique passwords for several different services. Select a unique and random combination of data, the longer the better, and do not disclose it."
            }
        },
        "HDInsightClusterLoginPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Used to login to HDInsights cluster interface. The password must be at least 10 characters in length and must contain at least one digit, one non-alphanumeric character, and one upper or lower case letter."
            }
        },
        "HDInsightSshPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Used to login to HDInsight cluster nodes via SSH. The password must be at least 10 characters in length and must contain at least one digit, one non-alphanumeric character, and one upper or lower case letter."
            }
        },
        "openCgaAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Used to login to OpenCGA. The password must be at least 10 characters in length and must contain at least one digit, one non-alphanumeric character, and one upper or lower case letter."
            }
        },
        "catalogSecretKey": {
            "type": "securestring",
            "metadata": {
                "description": "Secret key used when initializing the catalog."
            }
        },
        "healthCheckInterval": {
            "type": "int",
            "defaultValue": 30,
            "metadata": {
                "description": "HealthCheck cache interval value in seconds."
            }
        },
        "customDeploymentSize": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Define an object for a custom tshirt size of the deployment. WARNING: Intended for experimenting or debugging use with care."
            }
        },
        "cellbaseRestUrls": {
            "type": "string",
            "defaultValue": "http://bioinfo.hpc.cam.ac.uk/cellbase/",
            "metadata": {
                "description": "A CSV list of cellbase REST service hosts"
            }
        },
        "cellbaseMongoDbHosts": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "A CSV list of mongo DB hosts with the cellbase database"
            }
        },
        "cellbaseMongoDbUser": {
            "type": "string",
            "defaultValue": ""
        },
        "cellbaseMongoDbPassword": {
            "type": "securestring",
            "defaultValue": ""
        },
        "fileSystemType": {
            "type": "string",
            "defaultValue": "azurefiles",
            "allowedValues": [
                "azurefiles",
                "nfs"
            ],
            "metadata": {
                "description": "Defines the file system type the sytem will use when deployed in Azure. When using `NFS` the servers must have a mountable folder `opencga` available for mouting by the USER: `opencga` UID: `1001`"
            }
        },
        "fileSystemParams": {
            "type": "securestring",
            "defaultValue": "AUTOCREATE",
            "metadata": {
                "description": "When `fileSystemType` is set to `nfs` this should be a list of NFS server IPs or FQDNS accessible from the OpenCGA VNET. When `fileSystemType` is set to AzureFiles this parameter can be set to `<storage-account-name>,<share-name>,<storage-account-key>` to use an existing storage account."
            }
        }
    },
    "variables": {
        "dnsNamePrefix": "[toLower(substring(concat('opencga', uniqueString(subscription().subscriptionId,parameters('rgPrefix'))), 0, 16))]",
        "createAzureFilesShare": "[if(equals(parameters('fileSystemParams'), 'AUTOCREATE'), bool('true'), bool('false'))]",
        "sizingOptions": [
            "[parameters('customDeploymentSize')]",
            {
                "type": "1 = Small",
                "solr": {
                    "ha": false,
                    "nodeSize": "Standard_E4_v3",
                    "nodeCount": 1
                },
                "batch": {
                    "maxNodeCount": 5,
                    "nodeSize": "Standard_D4s_v3"
                },
                "mongo": {
                    "nodeCount": 1,
                    "nodeSize": "Standard_D4s_v3",
                    "diskType": "E10"
                },
                "hdInsight": {
                    "head": {
                        "nodeCount": 2,
                        "nodeSize": "Standard_D4_v2"
                    },
                    "worker": {
                        "nodeCount": 2,
                        "nodeSize": "Standard_D3_v2"
                    },
                    "yarnSiteMemoryInMb": 7000
                },
                "daemon": {
                    "nodeSize": "Standard_DS2_v2"
                },
                "webServers": {
                    "minNodeCount": 1,
                    "maxNodeCount": 2,
                    "nodeSize": "Standard_DS2_v2"
                }
            },
            {
                "type": "2 = Medium",
                "solr": {
                    "ha": true,
                    "nodeSize": "Standard_E8_v3",
                    "nodeCount": 2
                },
                "batch": {
                    "maxNodeCount": 16,
                    "nodeSize": "Standard_D4s_v3"
                },
                "mongo": {
                    "nodeCount": 3,
                    "nodeSize": "Standard_E8s_v3",
                    "diskType": "P20"
                },
                "hdInsight": {
                    "head": {
                        "nodeCount": 2,
                        "nodeSize": "Standard_D4_v2"
                    },
                    "worker": {
                        "nodeCount": 20,
                        "nodeSize": "Standard_D5_v2"
                    },
                    "yarnSiteMemoryInMb": 14000
                },
                "daemon": {
                    "nodeSize": "Standard_F8s_v2"
                },
                "webServers": {
                    "minNodeCount": 2,
                    "maxNodeCount": 2,
                    "nodeSize": "Standard_DS4_v2"
                }
            },
            {
                "type": "3 = Large",
                "solr": {
                    "ha": true,
                    "nodeSize": "Standard_E16_v3",
                    "nodeCount": 2
                },
                "batch": {
                    "maxNodeCount": 1000,
                    "nodeSize": "Standard_D4s_v3"
                },
                "mongo": {
                    "nodeCount": 5,
                    "nodeSize": "Standard_E16s_v3",
                    "diskType": "P20"
                },
                "hdInsight": {
                    "head": {
                        "nodeCount": 2,
                        "nodeSize": "Standard_D4_v2"
                    },
                    "worker": {
                        "nodeCount": 50,
                        "nodeSize": "Standard_D14_v2"
                    },
                    "yarnSiteMemoryInMb": 62720
                },
                "daemon": {
                    "nodeSize": "Standard_F8s_v2"
                },
                "webServers": {
                    "minNodeCount": 2,
                    "maxNodeCount": 4,
                    "nodeSize": "Standard_DS4_v2"
                }
            }
        ],
        "selectedSize": "[variables('sizingOptions')[parameters('deploymentSize')]]"
    },
    "resources": [
        {
            "type": "Microsoft.Resources/resourceGroups",
            "apiVersion": "2018-05-01",
            "location": "[parameters('rgLocation')]",
            "name": "[parameters('rgPrefix')]",
            "properties": {}
        },
        {
            "resourceGroup": "[parameters('rgPrefix')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "vnet",
            "dependsOn": [
                "[parameters('rgPrefix')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/vnet/azuredeploy.json', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                }
            }
        },
        {
            "resourceGroup": "[parameters('rgPrefix')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "loganalytics",
            "dependsOn": [
                "[parameters('rgPrefix')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/loganalytics/azuredeploy.json', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                }
            }
        },
        {
            "resourceGroup": "[parameters('rgPrefix')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "appgw",
            "dependsOn": [
                "vnet"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/appgw/azuredeploy.json', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "applicationGatewaySubnetId": {
                        "value": "[reference('vnet').outputs.appgwSubnetId.value]"
                    },
                    "dnsNamePrefix": {
                        "value": "[variables('dnsNamePrefix')]"
                    },
                    "LogAnalyticsWorkspaceResourceID": {
                        "value": "[reference('loganalytics').outputs.logAnalyticsWorkspaceResourceID.value]"
                    }
                }
            }
        },
        {
            "condition": "[variables('createAzureFilesShare')]",
            "resourceGroup": "[parameters('rgPrefix')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "azurefiles",
            "dependsOn": [
                "[parameters('rgPrefix')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/azurefiles/azuredeploy.json', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                }
            }
        },
        {
            "resourceGroup": "[parameters('rgPrefix')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "azureBatch",
            "dependsOn": [
                "[parameters('rgPrefix')]",
                "azurefiles",
                "vnet",
                "appinsights"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/azurebatch/azuredeploy.json', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    },
                    "virtualNetworkSubnetId": {
                        "value": "[reference('vnet').outputs.defaultSubnetId.value]"
                    },
                    "mountArgs": {
                        "value": "[if(variables('createAzureFilesShare'), concat('azurefiles ', reference('azurefiles').outputs.accountName.value, ',', reference('azurefiles').outputs.shareName.value, ',' , reference('azurefiles').outputs.accountKey.value), concat(parameters('fileSystemType'), ' ', parameters('fileSystemParams')))]"
                    },
                    "maxNodeCount": {
                        "value": "[variables('selectedSize').batch.maxNodeCount]"
                    },
                    "virtualMachineSize": {
                        "value": "[variables('selectedSize').batch.nodeSize]"
                    },
                    "dockerImagesToCache": {
                        "value": []
                    },
                    "LogAnalyticsWorkspaceResourceID": {
                        "value": "[reference('loganalytics').outputs.logAnalyticsWorkspaceResourceID.value]"
                    },
                    "appInsightsAppId": {
                        "value": "[reference('appinsights').outputs.appId.value]"
                    },
                    "appInsightsInstrumentationKey": {
                        "value": "[reference('appinsights').outputs.instrumentationKey.value]"
                    }
                }
            }
        },
        {
            "resourceGroup": "[parameters('rgPrefix')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "hdinsight-storage",
            "dependsOn": [
                "vnet",
                "[parameters('rgPrefix')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/hdinsight-storage/azuredeploy.json', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "networkAclsVirtualNetworkRule": {
                        "value": "[reference('vnet').outputs.hdinsightSubnetId.value]"
                    },
                    "isHnsEnabled": {
                        "value": "[if(equals(parameters('HDInsightstorageOption'), 'DataLake'), json('true'), json('false'))]"
                    }
                }
            }
        },
        {
            "comments": "This deploys a VM to run the OpenCGA daemon",
            "resourceGroup": "[parameters('rgPrefix')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "daemonvm",
            "dependsOn": [
                "azurefiles",
                "vnet",
                "hdinsight",
                "loganalytics",
                "[parameters('rgPrefix')]",
                "azureBatch"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/daemonvm/azuredeploy.jsonc', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    },
                    "virtualMachineSize": {
                        "value": "[variables('selectedSize').daemon.nodeSize]"
                    },
                    "openCgaAdminPassword": {
                        "value": "[parameters('openCgaAdminPassword')]"
                    },
                    "virtualNetworkId": {
                        "value": "[reference('vnet').outputs.vnetId.value]"
                    },
                    "sshKeyData": {
                        "value": "[parameters('sshAdminKeyData')]"
                    },
                    "hdInsightSshDns": {
                        "value": "[reference('hdinsight').outputs.clusterSshDnsName.value]"
                    },
                    "hdInsightSshUsername": {
                        "value": "[reference('hdinsight').outputs.clusterSshUsername.value]"
                    },
                    "hdInsightSshPassword": {
                        "value": "[reference('hdinsight').outputs.clusterSshPassword.value]"
                    },
                    "daemonContainerImage": {
                        "value": "[parameters('daemonContainerImage')]"
                    },
                    "initContainerImage": {
                        "value": "[parameters('initContainerImage')]"
                    },
                    "mountArgs": {
                        "value": "[if(variables('createAzureFilesShare'), concat('azurefiles ', reference('azurefiles').outputs.accountName.value, ',', reference('azurefiles').outputs.shareName.value, ',' , reference('azurefiles').outputs.accountKey.value), concat(parameters('fileSystemType'), ' ', parameters('fileSystemParams')))]"
                    },
                    "opencgaFQDN": {
                        "value": "[reference('appgw').outputs.fqdn.value]"
                    },
                    "solrHosts": {
                        "value": "[reference('solr').outputs.solrConnectionDetails.value]"
                    },
                    "solrUser": {
                        "value": "todo"
                    },
                    "solrPassword": {
                        "value": "todo"
                    },
                    "mongoDbHosts": {
                        "value": "[reference('mongodb').outputs.dnsNames.value]"
                    },
                    "mongoDbUser": {
                        "value": "[reference('mongodb').outputs.mongoDBUser.value]"
                    },
                    "mongoDbPassword": {
                        "value": "[reference('mongodb').outputs.mongoDBPassword.value]"
                    },
                    "cellbaseRestUrls": {
                        "value": "[parameters('cellbaseRestUrls')]"
                    },
                    "cellbaseMongoDbHosts": {
                        "value": "[parameters('cellbaseMongoDbHosts')]"
                    },
                    "cellbaseMongoDbUser": {
                        "value": "[parameters('cellbaseMongoDbUser')]"
                    },
                    "cellbaseMongoDbPassword": {
                        "value": "[string(parameters('cellbaseMongoDbPassword'))]"
                    },
                    "catalogSecretKey": {
                        "value": "[parameters('catalogSecretKey')]"
                    },
                    "batchAccountName": {
                        "value": "[reference('azureBatch').outputs.batchAccountName.value]"
                    },
                    "batchEndpoint": {
                        "value": "[reference('azureBatch').outputs.batchEndpoint.value]"
                    },
                    "batchAccountKey": {
                        "value": "[reference('azureBatch').outputs.batchAccountKey.value]"
                    },
                    "batchPoolId": {
                        "value": "[reference('azureBatch').outputs.batchPoolId.value]"
                    },
                    "batchDockerArgs": {
                        "value": "-v  /media/primarynfs/conf:/opt/opencga/conf -v /media/primarynfs/sessions:/opt/opencga/sessions -v /media/primarynfs/variants:/opt/opencga/variants --rm"
                    },
                    "batchContainerImage": {
                        "value": "[parameters('batchContainerImage')]"
                    },
                    "batchMaxConcurrentJobs": {
                        "value": "[reference('azureBatch').outputs.maxNodeCount.value]"
                    },
                    "healthCheckInterval": {
                        "value": "[parameters('healthCheckInterval')]"
                    },
                    "LogAnalyticsWorkspaceID": {
                        "value": "[reference('loganalytics').outputs.LogAnalyticsWorkspaceID.value]"
                    },
                    "LogAnalyticsWorkspaceKey": {
                        "value": "[reference('loganalytics').outputs.LogAnalyticsWorkspaceKey.value]"
                    },
                    "LogAnalyticsWorkspaceResourceID": {
                        "value": "[reference('loganalytics').outputs.LogAnalyticsWorkspaceResourceID.value]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/resourceGroups",
            "apiVersion": "2018-05-01",
            "location": "[parameters('rgLocation')]",
            "name": "[concat(parameters('rgPrefix'),'-hdinsight')]",
            "properties": {}
        },
        {
            "resourceGroup": "[concat(parameters('rgPrefix'),'-hdinsight')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "hdinsight",
            "dependsOn": [
                "hdinsight-storage",
                "[concat(parameters('rgPrefix'),'-hdinsight')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/hdinsight/azuredeploy.json', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "clusterLoginUserName": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "clusterLoginPassword": {
                        "value": "[parameters('HDInsightClusterLoginPassword')]"
                    },
                    "clusterHeadNodeCount": {
                        "value": "[variables('selectedSize').hdInsight.head.nodeCount]"
                    },
                    "clusterHeadNodeSize": {
                        "value": "[variables('selectedSize').hdInsight.head.nodeSize]"
                    },
                    "clusterWorkerNodeCount": {
                        "value": "[variables('selectedSize').hdInsight.worker.nodeCount]"
                    },
                    "clusterWorkerNodeSize": {
                        "value": "[variables('selectedSize').hdInsight.worker.nodeSize]"
                    },
                    "yarnSiteMemoryInMb": {
                        "value": "[variables('selectedSize').hdInsight.yarnSiteMemoryInMb]"
                    },
                    "sshPassword": {
                        "value": "[parameters('HDInsightSshPassword')]"
                    },
                    "storageAccountName": {
                        "value": "[reference('hdinsight-storage').outputs.storageAccountName.value]"
                    },
                    "storageAccountKey": {
                        "value": "[reference('hdinsight-storage').outputs.storageAccountKey.value]"
                    },
                    "vnetId": {
                        "value": "[reference('vnet').outputs.vnetId.value]"
                    },
                    "subnetId": {
                        "value": "[reference('vnet').outputs.hdinsightSubnetId.value]"
                    },
                    "storageOption": {
                        "value": "[parameters('HDInsightstorageOption')]"
                    },
                    "LogAnalyticsWorkspaceResourceID": {
                        "value": "[reference('loganalytics').outputs.logAnalyticsWorkspaceResourceID.value]"
                    },
                    "LogAnalyticsWorkspaceID": {
                        "value": "[reference('loganalytics').outputs.LogAnalyticsWorkspaceID.value]"
                    },
                    "LogAnalyticsWorkspaceKey": {
                        "value": "[reference('loganalytics').outputs.LogAnalyticsWorkspaceKey.value]"
                    }
                }
            }
        },
        {
            "comments": "This deploys a VMSS which hosts the OpenCGA and IVA services behind a LB with healthchecking, autoscaling and rolling update",
            "type": "Microsoft.Resources/deployments",
            "resourceGroup": "[parameters('rgPrefix')]",
            "apiVersion": "2018-05-01",
            "name": "webservers",
            "dependsOn": [
                "azurefiles",
                "loganalytics",
                "vnet",
                "daemonvm",
                "[parameters('rgPrefix')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/webservers/azuredeploy.json', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    },
                    "virtualMachineSize": {
                        "value": "[variables('selectedSize').webServers.nodeSize]"
                    },
                    "minInstanceCount": {
                        "value": "[variables('selectedSize').webServers.minNodeCount]"
                    },
                    "initialInstanceCount": {
                        "value": "[variables('selectedSize').webServers.minNodeCount]"
                    },
                    "maxInstanceCount": {
                        "value": "[variables('selectedSize').webServers.maxNodeCount]"
                    },
                    "virtualNetworkSubnetId": {
                        "value": "[reference('vnet').outputs.hdinsightSubnetId.value]"
                    },
                    "appgwBackendAddressPoolId": {
                        "value": "[reference('appgw').outputs.appgwBackendAddressPoolId.value]"
                    },
                    "mountArgs": {
                        "value": "[if(variables('createAzureFilesShare'), concat('azurefiles ', reference('azurefiles').outputs.accountName.value, ',', reference('azurefiles').outputs.shareName.value, ',' , reference('azurefiles').outputs.accountKey.value), concat(parameters('fileSystemType'), ' ', parameters('fileSystemParams')))]"                        
                    },
                    "SSHKeyData": {
                        "value": "[parameters('sshAdminKeyData')]"
                    },
                    "openCGAContainerImage": {
                        "value": "[parameters('openCGAContainerImage')]"
                    },
                    "ivaContainerImage": {
                        "value": "[parameters('ivaContainerImage')]"
                    },
                    "LogAnalyticsWorkspaceID": {
                        "value": "[reference('loganalytics').outputs.LogAnalyticsWorkspaceID.value]"
                    },
                    "LogAnalyticsWorkspaceKey": {
                        "value": "[reference('loganalytics').outputs.LogAnalyticsWorkspaceKey.value]"
                    },
                    "LogAnalyticsWorkspaceResourceID": {
                        "value": "[reference('loganalytics').outputs.LogAnalyticsWorkspaceResourceID.value]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/resourceGroups",
            "apiVersion": "2018-05-01",
            "location": "[parameters('rgLocation')]",
            "name": "[concat(parameters('rgPrefix'),'-solr')]",
            "properties": {}
        },
        {
            "type": "Microsoft.Resources/deployments",
            "resourceGroup": "[concat(parameters('rgPrefix'),'-solr')]",
            "apiVersion": "2018-05-01",
            "name": "solr",
            "dependsOn": [
                "vnet"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/solr/azuredeploy.json', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "clusterName": {
                        "value": "opencga"
                    },
                    "subnetId": {
                        "value": "[reference('vnet').outputs.solrSubnetId.value]"
                    },
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    },
                    "location": {
                        "value": "[parameters('rgLocation')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "sshKeyData": {
                        "value": "[parameters('sshAdminKeyData')]"
                    },
                    "highAvailability": {
                        "value": "[variables('selectedSize').solr.ha]"
                    },
                    "solrDiskSizeGB": {
                        "value": "[parameters('solrDiskSizeGB')]"
                    },
                    "solrVMSize": {
                        "value": "[variables('selectedSize').solr.nodeSize]"
                    },
                    "zookeeperVMSize": {
                        "value": "[parameters('zookeeperVMSize')]"
                    },
                    "diskType": {
                        "value": "[parameters('solrDiskType')]"
                    },
                    "LogAnalyticsWorkspaceID": {
                        "value": "[reference('loganalytics').outputs.LogAnalyticsWorkspaceID.value]"
                    },
                    "LogAnalyticsWorkspaceKey": {
                        "value": "[reference('loganalytics').outputs.LogAnalyticsWorkspaceKey.value]"
                    },
                    "LogAnalyticsWorkspaceResourceID": {
                        "value": "[reference('loganalytics').outputs.LogAnalyticsWorkspaceResourceID.value]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/resourceGroups",
            "apiVersion": "2018-05-01",
            "location": "[parameters('rgLocation')]",
            "name": "[concat(parameters('rgPrefix'),'-mongodb')]",
            "properties": {}
        },
        {
            "type": "Microsoft.Resources/deployments",
            "resourceGroup": "[concat(parameters('rgPrefix'),'-mongodb')]",
            "apiVersion": "2018-05-01",
            "name": "mongodb",
            "dependsOn": [
                "vnet",
                "[parameters('rgPrefix')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/mongodb/azuredeploy.json', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "subnetId": {
                        "value": "[reference('vnet').outputs.mongoSubnetId.value]"
                    },
                    "location": {
                        "value": "[parameters('rgLocation')]"
                    },
                    "vmSize": {
                        "value": "[variables('selectedSize').mongo.nodeSize]"
                    },
                    "clusterSize": {
                        "value": "[variables('selectedSize').mongo.nodeCount]"
                    },
                    "certificateEmail": {
                        "value": "[parameters('mongoCertificateEmail')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminSSHKeyData": {
                        "value": "[parameters('sshAdminKeyData')]"
                    },
                    "mongoDBUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "mongoDBPassword": {
                        "value": "[parameters('mongoDBPassword')]"
                    },
                    "LogAnalyticsWorkspaceResourceID": {
                        "value": "[reference('loganalytics').outputs.LogAnalyticsWorkspaceResourceID.value]"
                    },
                    "LogAnalyticsWorkspaceID": {
                        "value": "[reference('loganalytics').outputs.LogAnalyticsWorkspaceID.value]"
                    },
                    "LogAnalyticsWorkspaceKey": {
                        "value": "[reference('loganalytics').outputs.LogAnalyticsWorkspaceKey.value]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "resourceGroup": "[concat(parameters('rgPrefix'))]",
            "apiVersion": "2018-05-01",
            "name": "appinsights",
            "dependsOn": [
                "vnet",
                "[parameters('rgPrefix')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('_artifactsLocation'), '/appinsights/azuredeploy.json', parameters('_artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {}
            }
        }
    ],
    "outputs": {}
}