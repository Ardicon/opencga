---
logLevel: "INFO"
logFile: null

openRegister: false
userDefaultQuota: 200000

databasePrefix: ${OPENCGA.DB.PREFIX}
dataDir: ${OPENCGA.USER.WORKSPACE}
tempJobsDir: ${OPENCGA.JOBS.DIR}
toolDir: ${OPENCGA.TOOLS.DIR}

## Configuration for Catalog databases
catalog:
  # DEPRECATED
  offset: 0
  database:
    hosts:
    - ${OPENCGA.CATALOG.DB.HOSTS}
    user: ${OPENCGA.CATALOG.DB.USER}
    password: ${OPENCGA.CATALOG.DB.PASSWORD}
    options:
      authenticationDatabase: ${OPENCGA.CATALOG.DB.AUTHENTICATION_DATABASE}
      connectionsPerHost: ${OPENCGA.CATALOG.DB.CONNECTIONS_PER_HOST}
  ## Solr Search engine configuration, by default is the same than storage
  search:
    # List of hosts pointing either to the Solr nodes directly using a complete URL or to the zookeper nodes with HOST:PORT
    #    Example for Solr connection:       http://opencga-solr-01.zone:8983/solr
    #    Example for Zookeeper connection:  opencga-zookeeper-01:2181               <-- Recommended for replicated installations
    hosts:
    - ${OPENCGA.CATALOG.SEARCH.HOST}
    mode: "cloud"
    user: ""
    password: ""
    timeout: ${OPENCGA.CATALOG.SEARCH.TIMEOUT}
    insertBatchSize: ${OPENCGA.CATALOG.SEARCH.BATCH}

## We support multiple Authentication providers, if none is provided then we use an internal authentication implementation
authentication:
  # Session expiration time in seconds
  expiration: 3600
  authenticationOrigins:
# LDAP configuration example
#  - id: ldap            # Any id
#    type: LDAP
#    host: ldap://localhost:9000
#    options:
#      usersSearch: dc=ge,dc=co,dc=uk # Base search to look for the users
#      groupsSearch: ou=general,ou=groups,dc=ge,dc=co,dc=uk # Base search to look for the groups

# Custom LDAPS configuration example
#  - id: ldaps            # Any id
#    type: LDAP
#    host: ldaps://localhost:636
#    options:
#      usersSearch: dc=ge,dc=co,dc=uk                       # Base search to look for users
#      groupsSearch: ou=general,ou=groups,dc=ge,dc=co,dc=uk # Base search to look for groups
#      fullNameKey: displayname                             # Key to get the user's full name when importing users
#      dnKey: gecos                                         # Get the user's unique identifier...
#      dnFormat: "uid=%s,ou=people,dc=ge,dc=co,dc=uk"       # ...and pass a distinguished name to the auth request in the right format

# Azure AD configuration example
#  - id: aad                                               # Any id
#    type: AzureAD
#    host:
#    options:
#      tenantId: xxxx              # Mandatory. Tenant id
#      authClientId: xxxx          # Mandatory. Client id of the client with permissions to authenticate users.
#      syncClientId: xxxx          # Mandatory. Client id of the client with permissions to inspect active directory.
#      syncSecretKey: xxxx         # Mandatory: Secret key of the client with permissions to inspect active directory.
#      filters: tokenField1=aa,bb,cc;tokenField2=aa,bb,cc  # Optional. Filters to be applied. OpenCGA will check if tokenField1 = aa or bb
#                # or cc and tokenField2 = aa or bb or cc. If any of the filters don't succeed, even if the user is properly authenticated
#                # in AAD, the user will not be able to generate a token and login in OpenCGA.

server:
  rest:
    port: ${OPENCGA.SERVER.REST.PORT}
    logFile: null
    defaultLimit: 2000
    maxLimit: 5000
  grpc:
    port: ${OPENCGA.SERVER.GRPC.PORT}
    logFile: null

audit:
  maxDocuments: 20000000 # Maximum number of documents that will be created in the audit collection.
  maxSize: 100000000000  # Maximum size that the audit collection will have in bytes.
  javaClass: ""          # Java class of the audit implementation to be used to audit.
  exclude: []            # Array of resource:action to select pairwise resource-actions to be excluded for audit purposes.

monitor:
  daysToRemove: 30
  executionDaemonInterval: 4000 # number of milliseconds between checks
  fileDaemonInterval: 8000      # number of milliseconds between checks
  port: ${OPENCGA.MONITOR.PORT}

healthCheck:
  interval : 30 # seconds to get actual healthCheck than cache

execution:
  mode: ${OPENCGA.EXECUTION.MODE}
  maxConcurrentIndexJobs : 1 # only applies to local executor
  defaultQueue: ""
  availableQueues: ""
  toolsPerQueue: {}
  options:
# Azure Batch Service configuration example
#    batchAccount : "batchAccount"
#    batchKey : "batchKey"
#    batchUri : "https://batchservice.uksouth.batch.azure.com"
#    batchPoolId : "poolId"
#    dockerImageName : "openCGADockerImageName"
#    dockerArgs : "dockerRunOptions"

email:
  host: ${OPENCGA.MAIL.HOST}
  port: ${OPENCGA.MAIL.PORT}
  user: ${OPENCGA.MAIL.USER}
  password: ${OPENCGA.MAIL.PASSWORD}
  from: ""
  ssl: false

#hooks:
#  user@project:study:              # Full Qualified Name of the study.
#    file:                          # Entity where the hook will be checked
#     - field: "name"               # Field of the entity to be checked
#       value: "~(.*)SV.vcf.gz$"    # Value that needs to be satisfied to perform the hook action
#       stage: "CREATE"             # Stage when the hook will be checked
#       action: "ADD"               # Action to be performed
#       where: "tags"               # Field over which the action will be performed
#       what: "SV"                  # Value to be updated
