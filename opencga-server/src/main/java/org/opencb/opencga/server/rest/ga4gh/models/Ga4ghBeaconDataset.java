/*
 * GA4GH Beacon API Specification
 * A Beacon is a web service for genetic data sharing that can be queried for  information about variants, individuals or samples.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: beacon@ga4gh.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.opencb.opencga.server.rest.ga4gh.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import javax.validation.Valid;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import java.util.Objects;

/**
 * A dataset available in the beacon. 
 */
@ApiModel(description = "A dataset available in the beacon. ")
@JsonPropertyOrder({
  Ga4ghBeaconDataset.JSON_PROPERTY_ID,
  Ga4ghBeaconDataset.JSON_PROPERTY_NAME,
  Ga4ghBeaconDataset.JSON_PROPERTY_DESCRIPTION,
  Ga4ghBeaconDataset.JSON_PROPERTY_ASSEMBLY_ID,
  Ga4ghBeaconDataset.JSON_PROPERTY_CREATE_DATE_TIME,
  Ga4ghBeaconDataset.JSON_PROPERTY_UPDATE_DATE_TIME,
  Ga4ghBeaconDataset.JSON_PROPERTY_VERSION,
  Ga4ghBeaconDataset.JSON_PROPERTY_VARIANT_COUNT,
  Ga4ghBeaconDataset.JSON_PROPERTY_CALL_COUNT,
  Ga4ghBeaconDataset.JSON_PROPERTY_SAMPLE_COUNT,
  Ga4ghBeaconDataset.JSON_PROPERTY_EXTERNAL_URL,
  Ga4ghBeaconDataset.JSON_PROPERTY_INFO,
  Ga4ghBeaconDataset.JSON_PROPERTY_DATA_USE_CONDITIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2020-03-24T15:12:46.170Z[Europe/London]")
public class Ga4ghBeaconDataset   {
  public static final String JSON_PROPERTY_ID = "id";
  @JsonProperty(JSON_PROPERTY_ID)
  private String id;

  public static final String JSON_PROPERTY_NAME = "name";
  @JsonProperty(JSON_PROPERTY_NAME)
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  private String description;

  public static final String JSON_PROPERTY_ASSEMBLY_ID = "assemblyId";
  @JsonProperty(JSON_PROPERTY_ASSEMBLY_ID)
  private String assemblyId;

  public static final String JSON_PROPERTY_CREATE_DATE_TIME = "createDateTime";
  @JsonProperty(JSON_PROPERTY_CREATE_DATE_TIME)
  private String createDateTime;

  public static final String JSON_PROPERTY_UPDATE_DATE_TIME = "updateDateTime";
  @JsonProperty(JSON_PROPERTY_UPDATE_DATE_TIME)
  private String updateDateTime;

  public static final String JSON_PROPERTY_VERSION = "version";
  @JsonProperty(JSON_PROPERTY_VERSION)
  private String version;

  public static final String JSON_PROPERTY_VARIANT_COUNT = "variantCount";
  @JsonProperty(JSON_PROPERTY_VARIANT_COUNT)
  private Long variantCount;

  public static final String JSON_PROPERTY_CALL_COUNT = "callCount";
  @JsonProperty(JSON_PROPERTY_CALL_COUNT)
  private Long callCount;

  public static final String JSON_PROPERTY_SAMPLE_COUNT = "sampleCount";
  @JsonProperty(JSON_PROPERTY_SAMPLE_COUNT)
  private Long sampleCount;

  public static final String JSON_PROPERTY_EXTERNAL_URL = "externalUrl";
  @JsonProperty(JSON_PROPERTY_EXTERNAL_URL)
  private String externalUrl;

  public static final String JSON_PROPERTY_INFO = "info";
  @JsonProperty(JSON_PROPERTY_INFO)
  private Object info;

  public static final String JSON_PROPERTY_DATA_USE_CONDITIONS = "dataUseConditions";
  @JsonProperty(JSON_PROPERTY_DATA_USE_CONDITIONS)
  private Ga4ghDataUseConditions dataUseConditions;

  public Ga4ghBeaconDataset id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of the dataset. 
   * @return id
   **/
  @JsonProperty("id")
  @ApiModelProperty(required = true, value = "Unique identifier of the dataset. ")
  @NotNull 
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Ga4ghBeaconDataset name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the dataset. 
   * @return name
   **/
  @JsonProperty("name")
  @ApiModelProperty(required = true, value = "Name of the dataset. ")
  @NotNull 
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Ga4ghBeaconDataset description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the dataset. 
   * @return description
   **/
  @JsonProperty("description")
  @ApiModelProperty(value = "Description of the dataset. ")
  
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Ga4ghBeaconDataset assemblyId(String assemblyId) {
    this.assemblyId = assemblyId;
    return this;
  }

  /**
   * Assembly identifier (GRC notation, e.g. &#x60;GRCh37&#x60;). 
   * @return assemblyId
   **/
  @JsonProperty("assemblyId")
  @ApiModelProperty(example = "GRCh38", required = true, value = "Assembly identifier (GRC notation, e.g. `GRCh37`). ")
  @NotNull 
  public String getAssemblyId() {
    return assemblyId;
  }

  public void setAssemblyId(String assemblyId) {
    this.assemblyId = assemblyId;
  }

  public Ga4ghBeaconDataset createDateTime(String createDateTime) {
    this.createDateTime = createDateTime;
    return this;
  }

  /**
   * The time the dataset was created (ISO 8601 format). 
   * @return createDateTime
   **/
  @JsonProperty("createDateTime")
  @ApiModelProperty(example = "2012-07-29 or 2017-01-17T20:33:40Z", required = true, value = "The time the dataset was created (ISO 8601 format). ")
  @NotNull 
  public String getCreateDateTime() {
    return createDateTime;
  }

  public void setCreateDateTime(String createDateTime) {
    this.createDateTime = createDateTime;
  }

  public Ga4ghBeaconDataset updateDateTime(String updateDateTime) {
    this.updateDateTime = updateDateTime;
    return this;
  }

  /**
   * The time the dataset was updated in (ISO 8601 format). 
   * @return updateDateTime
   **/
  @JsonProperty("updateDateTime")
  @ApiModelProperty(example = "2012-07-19 or 2017-01-17T20:33:40Z", required = true, value = "The time the dataset was updated in (ISO 8601 format). ")
  @NotNull 
  public String getUpdateDateTime() {
    return updateDateTime;
  }

  public void setUpdateDateTime(String updateDateTime) {
    this.updateDateTime = updateDateTime;
  }

  public Ga4ghBeaconDataset version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Version of the dataset. 
   * @return version
   **/
  @JsonProperty("version")
  @ApiModelProperty(value = "Version of the dataset. ")
  
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public Ga4ghBeaconDataset variantCount(Long variantCount) {
    this.variantCount = variantCount;
    return this;
  }

  /**
   * Total number of variants in the dataset. 
   * minimum: 0
   * @return variantCount
   **/
  @JsonProperty("variantCount")
  @ApiModelProperty(value = "Total number of variants in the dataset. ")
   @Min(0L)
  public Long getVariantCount() {
    return variantCount;
  }

  public void setVariantCount(Long variantCount) {
    this.variantCount = variantCount;
  }

  public Ga4ghBeaconDataset callCount(Long callCount) {
    this.callCount = callCount;
    return this;
  }

  /**
   * Total number of calls in the dataset. 
   * minimum: 0
   * @return callCount
   **/
  @JsonProperty("callCount")
  @ApiModelProperty(value = "Total number of calls in the dataset. ")
   @Min(0L)
  public Long getCallCount() {
    return callCount;
  }

  public void setCallCount(Long callCount) {
    this.callCount = callCount;
  }

  public Ga4ghBeaconDataset sampleCount(Long sampleCount) {
    this.sampleCount = sampleCount;
    return this;
  }

  /**
   * Total number of samples in the dataset. 
   * minimum: 0
   * @return sampleCount
   **/
  @JsonProperty("sampleCount")
  @ApiModelProperty(value = "Total number of samples in the dataset. ")
   @Min(0L)
  public Long getSampleCount() {
    return sampleCount;
  }

  public void setSampleCount(Long sampleCount) {
    this.sampleCount = sampleCount;
  }

  public Ga4ghBeaconDataset externalUrl(String externalUrl) {
    this.externalUrl = externalUrl;
    return this;
  }

  /**
   * URL to an external system providing more dataset information (RFC 3986 format).
   * @return externalUrl
   **/
  @JsonProperty("externalUrl")
  @ApiModelProperty(example = "http://example.org/wiki/Main_Page", value = "URL to an external system providing more dataset information (RFC 3986 format).")
  
  public String getExternalUrl() {
    return externalUrl;
  }

  public void setExternalUrl(String externalUrl) {
    this.externalUrl = externalUrl;
  }

  public Ga4ghBeaconDataset info(Object info) {
    this.info = info;
    return this;
  }

  /**
   * Additional unspecified metadata about the dataset. 
   * @return info
   **/
  @JsonProperty("info")
  @ApiModelProperty(example = "{\"additionalInfoKey1\":[\"additionalInfoValue1\",\"additionalInfoValue2]\"],\"additionalInfoKey2\":\"additionalInfoValue3\"}", value = "Additional unspecified metadata about the dataset. ")
  @Valid 
  public Object getInfo() {
    return info;
  }

  public void setInfo(Object info) {
    this.info = info;
  }

  public Ga4ghBeaconDataset dataUseConditions(Ga4ghDataUseConditions dataUseConditions) {
    this.dataUseConditions = dataUseConditions;
    return this;
  }

  /**
   * Get dataUseConditions
   * @return dataUseConditions
   **/
  @JsonProperty("dataUseConditions")
  @ApiModelProperty(value = "")
  @Valid 
  public Ga4ghDataUseConditions getDataUseConditions() {
    return dataUseConditions;
  }

  public void setDataUseConditions(Ga4ghDataUseConditions dataUseConditions) {
    this.dataUseConditions = dataUseConditions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ga4ghBeaconDataset beaconDataset = (Ga4ghBeaconDataset) o;
    return Objects.equals(this.id, beaconDataset.id) &&
        Objects.equals(this.name, beaconDataset.name) &&
        Objects.equals(this.description, beaconDataset.description) &&
        Objects.equals(this.assemblyId, beaconDataset.assemblyId) &&
        Objects.equals(this.createDateTime, beaconDataset.createDateTime) &&
        Objects.equals(this.updateDateTime, beaconDataset.updateDateTime) &&
        Objects.equals(this.version, beaconDataset.version) &&
        Objects.equals(this.variantCount, beaconDataset.variantCount) &&
        Objects.equals(this.callCount, beaconDataset.callCount) &&
        Objects.equals(this.sampleCount, beaconDataset.sampleCount) &&
        Objects.equals(this.externalUrl, beaconDataset.externalUrl) &&
        Objects.equals(this.info, beaconDataset.info) &&
        Objects.equals(this.dataUseConditions, beaconDataset.dataUseConditions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, assemblyId, createDateTime, updateDateTime, version, variantCount, callCount, sampleCount, externalUrl, info, dataUseConditions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ga4ghBeaconDataset {\n");

    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    assemblyId: ").append(toIndentedString(assemblyId)).append("\n");
    sb.append("    createDateTime: ").append(toIndentedString(createDateTime)).append("\n");
    sb.append("    updateDateTime: ").append(toIndentedString(updateDateTime)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    variantCount: ").append(toIndentedString(variantCount)).append("\n");
    sb.append("    callCount: ").append(toIndentedString(callCount)).append("\n");
    sb.append("    sampleCount: ").append(toIndentedString(sampleCount)).append("\n");
    sb.append("    externalUrl: ").append(toIndentedString(externalUrl)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    dataUseConditions: ").append(toIndentedString(dataUseConditions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

