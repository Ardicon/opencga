/*
 * GA4GH Beacon API Specification
 * A Beacon is a web service for genetic data sharing that can be queried for  information about variants, individuals or samples.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: beacon@ga4gh.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.opencb.opencga.server.rest.ga4gh.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import javax.validation.Valid;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Description pending 
 */
@ApiModel(description = "Description pending ")
@JsonPropertyOrder({
  Ga4ghVariantsFoundResponse.JSON_PROPERTY_VARIANT,
  Ga4ghVariantsFoundResponse.JSON_PROPERTY_VARIANT_ANNOTATIONS,
  Ga4ghVariantsFoundResponse.JSON_PROPERTY_VARIANT_HANDOVER,
  Ga4ghVariantsFoundResponse.JSON_PROPERTY_DATASET_ALLELE_RESPONES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2020-03-24T15:12:46.170Z[Europe/London]")
public class Ga4ghVariantsFoundResponse   {
  public static final String JSON_PROPERTY_VARIANT = "variant";
  @JsonProperty(JSON_PROPERTY_VARIANT)
  private Ga4ghVariant variant;

  public static final String JSON_PROPERTY_VARIANT_ANNOTATIONS = "variantAnnotations";
  @JsonProperty(JSON_PROPERTY_VARIANT_ANNOTATIONS)
  private Ga4ghVariantAnnotation variantAnnotations;

  public static final String JSON_PROPERTY_VARIANT_HANDOVER = "variantHandover";
  @JsonProperty(JSON_PROPERTY_VARIANT_HANDOVER)
  private List<Ga4ghHandover> variantHandover = null;

  public static final String JSON_PROPERTY_DATASET_ALLELE_RESPONES = "datasetAlleleRespones";
  @JsonProperty(JSON_PROPERTY_DATASET_ALLELE_RESPONES)
  private List<Ga4ghBeaconDatasetAlleleResponse> datasetAlleleRespones = null;

  public Ga4ghVariantsFoundResponse variant(Ga4ghVariant variant) {
    this.variant = variant;
    return this;
  }

  /**
   * Get variant
   * @return variant
   **/
  @JsonProperty("variant")
  @ApiModelProperty(value = "")
  @Valid 
  public Ga4ghVariant getVariant() {
    return variant;
  }

  public void setVariant(Ga4ghVariant variant) {
    this.variant = variant;
  }

  public Ga4ghVariantsFoundResponse variantAnnotations(Ga4ghVariantAnnotation variantAnnotations) {
    this.variantAnnotations = variantAnnotations;
    return this;
  }

  /**
   * Get variantAnnotations
   * @return variantAnnotations
   **/
  @JsonProperty("variantAnnotations")
  @ApiModelProperty(value = "")
  @Valid 
  public Ga4ghVariantAnnotation getVariantAnnotations() {
    return variantAnnotations;
  }

  public void setVariantAnnotations(Ga4ghVariantAnnotation variantAnnotations) {
    this.variantAnnotations = variantAnnotations;
  }

  public Ga4ghVariantsFoundResponse variantHandover(List<Ga4ghHandover> variantHandover) {
    this.variantHandover = variantHandover;
    return this;
  }

  public Ga4ghVariantsFoundResponse addVariantHandoverItem(Ga4ghHandover variantHandoverItem) {
    if (this.variantHandover == null) {
      this.variantHandover = new ArrayList<Ga4ghHandover>();
    }
    this.variantHandover.add(variantHandoverItem);
    return this;
  }

  /**
   * Get variantHandover
   * @return variantHandover
   **/
  @JsonProperty("variantHandover")
  @ApiModelProperty(value = "")
  @Valid 
  public List<Ga4ghHandover> getVariantHandover() {
    return variantHandover;
  }

  public void setVariantHandover(List<Ga4ghHandover> variantHandover) {
    this.variantHandover = variantHandover;
  }

  public Ga4ghVariantsFoundResponse datasetAlleleRespones(List<Ga4ghBeaconDatasetAlleleResponse> datasetAlleleRespones) {
    this.datasetAlleleRespones = datasetAlleleRespones;
    return this;
  }

  public Ga4ghVariantsFoundResponse addDatasetAlleleResponesItem(Ga4ghBeaconDatasetAlleleResponse datasetAlleleResponesItem) {
    if (this.datasetAlleleRespones == null) {
      this.datasetAlleleRespones = new ArrayList<Ga4ghBeaconDatasetAlleleResponse>();
    }
    this.datasetAlleleRespones.add(datasetAlleleResponesItem);
    return this;
  }

  /**
   * Get datasetAlleleRespones
   * @return datasetAlleleRespones
   **/
  @JsonProperty("datasetAlleleRespones")
  @ApiModelProperty(value = "")
  @Valid 
  public List<Ga4ghBeaconDatasetAlleleResponse> getDatasetAlleleRespones() {
    return datasetAlleleRespones;
  }

  public void setDatasetAlleleRespones(List<Ga4ghBeaconDatasetAlleleResponse> datasetAlleleRespones) {
    this.datasetAlleleRespones = datasetAlleleRespones;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ga4ghVariantsFoundResponse variantsFoundResponse = (Ga4ghVariantsFoundResponse) o;
    return Objects.equals(this.variant, variantsFoundResponse.variant) &&
        Objects.equals(this.variantAnnotations, variantsFoundResponse.variantAnnotations) &&
        Objects.equals(this.variantHandover, variantsFoundResponse.variantHandover) &&
        Objects.equals(this.datasetAlleleRespones, variantsFoundResponse.datasetAlleleRespones);
  }

  @Override
  public int hashCode() {
    return Objects.hash(variant, variantAnnotations, variantHandover, datasetAlleleRespones);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ga4ghVariantsFoundResponse {\n");

    sb.append("    variant: ").append(toIndentedString(variant)).append("\n");
    sb.append("    variantAnnotations: ").append(toIndentedString(variantAnnotations)).append("\n");
    sb.append("    variantHandover: ").append(toIndentedString(variantHandover)).append("\n");
    sb.append("    datasetAlleleRespones: ").append(toIndentedString(datasetAlleleRespones)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

