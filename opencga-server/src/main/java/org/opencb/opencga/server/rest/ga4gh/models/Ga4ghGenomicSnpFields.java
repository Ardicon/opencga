/*
 * GA4GH Beacon API Specification
 * A Beacon is a web service for genetic data sharing that can be queried for  information about variants, individuals or samples.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: beacon@ga4gh.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.opencb.opencga.server.rest.ga4gh.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import javax.validation.Valid;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import java.util.Objects;

/**
 * SNP request made against the Beacon. 
 */
@ApiModel(description = "SNP request made against the Beacon. ")
@JsonPropertyOrder({
  Ga4ghGenomicSnpFields.JSON_PROPERTY_ASSEMBLY_ID,
  Ga4ghGenomicSnpFields.JSON_PROPERTY_REFERENCE_NAME,
  Ga4ghGenomicSnpFields.JSON_PROPERTY_REFERENCE_BASES,
  Ga4ghGenomicSnpFields.JSON_PROPERTY_ALTERNATE_BASES,
  Ga4ghGenomicSnpFields.JSON_PROPERTY_START
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2020-03-24T15:12:46.170Z[Europe/London]")
public class Ga4ghGenomicSnpFields   {
  public static final String JSON_PROPERTY_ASSEMBLY_ID = "assemblyId";
  @JsonProperty(JSON_PROPERTY_ASSEMBLY_ID)
  private String assemblyId;

  public static final String JSON_PROPERTY_REFERENCE_NAME = "referenceName";
  @JsonProperty(JSON_PROPERTY_REFERENCE_NAME)
  private Ga4ghChromosome referenceName;

  public static final String JSON_PROPERTY_REFERENCE_BASES = "referenceBases";
  @JsonProperty(JSON_PROPERTY_REFERENCE_BASES)
  private String referenceBases;

  public static final String JSON_PROPERTY_ALTERNATE_BASES = "alternateBases";
  @JsonProperty(JSON_PROPERTY_ALTERNATE_BASES)
  private String alternateBases;

  public static final String JSON_PROPERTY_START = "start";
  @JsonProperty(JSON_PROPERTY_START)
  private Long start;

  public Ga4ghGenomicSnpFields assemblyId(String assemblyId) {
    this.assemblyId = assemblyId;
    return this;
  }

  /**
   * Assembly identifier (GRC notation, e.g. GRCh37). 
   * @return assemblyId
   **/
  @JsonProperty("assemblyId")
  @ApiModelProperty(example = "GRCh38", required = true, value = "Assembly identifier (GRC notation, e.g. GRCh37). ")
  @NotNull 
  public String getAssemblyId() {
    return assemblyId;
  }

  public void setAssemblyId(String assemblyId) {
    this.assemblyId = assemblyId;
  }

  public Ga4ghGenomicSnpFields referenceName(Ga4ghChromosome referenceName) {
    this.referenceName = referenceName;
    return this;
  }

  /**
   * Get referenceName
   * @return referenceName
   **/
  @JsonProperty("referenceName")
  @ApiModelProperty(required = true, value = "")
  @NotNull @Valid 
  public Ga4ghChromosome getReferenceName() {
    return referenceName;
  }

  public void setReferenceName(Ga4ghChromosome referenceName) {
    this.referenceName = referenceName;
  }

  public Ga4ghGenomicSnpFields referenceBases(String referenceBases) {
    this.referenceBases = referenceBases;
    return this;
  }

  /**
   * Reference bases for this variant (starting from &#x60;start&#x60;). Accepted  values: [ACGT]*. 
   * @return referenceBases
   **/
  @JsonProperty("referenceBases")
  @ApiModelProperty(required = true, value = "Reference bases for this variant (starting from `start`). Accepted  values: [ACGT]*. ")
  @NotNull  @Pattern(regexp="^([ACGT]+)$")
  public String getReferenceBases() {
    return referenceBases;
  }

  public void setReferenceBases(String referenceBases) {
    this.referenceBases = referenceBases;
  }

  public Ga4ghGenomicSnpFields alternateBases(String alternateBases) {
    this.alternateBases = alternateBases;
    return this;
  }

  /**
   * The bases that appear instead of the reference bases. Accepted values:  [ACGT]*. 
   * @return alternateBases
   **/
  @JsonProperty("alternateBases")
  @ApiModelProperty(required = true, value = "The bases that appear instead of the reference bases. Accepted values:  [ACGT]*. ")
  @NotNull  @Pattern(regexp="^([ACGT]+)$")
  public String getAlternateBases() {
    return alternateBases;
  }

  public void setAlternateBases(String alternateBases) {
    this.alternateBases = alternateBases;
  }

  public Ga4ghGenomicSnpFields start(Long start) {
    this.start = start;
    return this;
  }

  /**
   * Precise start coordinate position, allele locus (0-based,  inclusive). * &#x60;start&#x60; only:   - for single positions, e.g. the start of a specified sequence    alteration where the size is given through the specified    &#x60;alternateBases&#x60;   - typical use are queries for SNV and small InDels 
   * minimum: 0
   * @return start
   **/
  @JsonProperty("start")
  @ApiModelProperty(required = true, value = "Precise start coordinate position, allele locus (0-based,  inclusive). * `start` only:   - for single positions, e.g. the start of a specified sequence    alteration where the size is given through the specified    `alternateBases`   - typical use are queries for SNV and small InDels ")
  @NotNull  @Min(0L)
  public Long getStart() {
    return start;
  }

  public void setStart(Long start) {
    this.start = start;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ga4ghGenomicSnpFields genomicSnpFields = (Ga4ghGenomicSnpFields) o;
    return Objects.equals(this.assemblyId, genomicSnpFields.assemblyId) &&
        Objects.equals(this.referenceName, genomicSnpFields.referenceName) &&
        Objects.equals(this.referenceBases, genomicSnpFields.referenceBases) &&
        Objects.equals(this.alternateBases, genomicSnpFields.alternateBases) &&
        Objects.equals(this.start, genomicSnpFields.start);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assemblyId, referenceName, referenceBases, alternateBases, start);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ga4ghGenomicSnpFields {\n");

    sb.append("    assemblyId: ").append(toIndentedString(assemblyId)).append("\n");
    sb.append("    referenceName: ").append(toIndentedString(referenceName)).append("\n");
    sb.append("    referenceBases: ").append(toIndentedString(referenceBases)).append("\n");
    sb.append("    alternateBases: ").append(toIndentedString(alternateBases)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

