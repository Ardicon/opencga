/*
 * GA4GH Beacon API Specification
 * A Beacon is a web service for genetic data sharing that can be queried for  information about variants, individuals or samples.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: beacon@ga4gh.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.opencb.opencga.server.rest.ga4gh.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import javax.validation.Valid;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Response containing information about an allele in a particular dataset. 
 */
@ApiModel(description = "Response containing information about an allele in a particular dataset. ")
@JsonPropertyOrder({
  Ga4ghBeaconDatasetAlleleResponse.JSON_PROPERTY_DATASET_ID,
  Ga4ghBeaconDatasetAlleleResponse.JSON_PROPERTY_EXISTS,
  Ga4ghBeaconDatasetAlleleResponse.JSON_PROPERTY_ERROR,
  Ga4ghBeaconDatasetAlleleResponse.JSON_PROPERTY_FREQUENCY,
  Ga4ghBeaconDatasetAlleleResponse.JSON_PROPERTY_VARIANT_COUNT,
  Ga4ghBeaconDatasetAlleleResponse.JSON_PROPERTY_CALL_COUNT,
  Ga4ghBeaconDatasetAlleleResponse.JSON_PROPERTY_SAMPLE_COUNT,
  Ga4ghBeaconDatasetAlleleResponse.JSON_PROPERTY_NOTE,
  Ga4ghBeaconDatasetAlleleResponse.JSON_PROPERTY_EXTERNAL_URL,
  Ga4ghBeaconDatasetAlleleResponse.JSON_PROPERTY_INFO,
  Ga4ghBeaconDatasetAlleleResponse.JSON_PROPERTY_DATASET_HANDOVER
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2020-03-24T15:12:46.170Z[Europe/London]")
public class Ga4ghBeaconDatasetAlleleResponse   {
  public static final String JSON_PROPERTY_DATASET_ID = "datasetId";
  @JsonProperty(JSON_PROPERTY_DATASET_ID)
  private String datasetId;

  public static final String JSON_PROPERTY_EXISTS = "exists";
  @JsonProperty(JSON_PROPERTY_EXISTS)
  private Boolean exists;

  public static final String JSON_PROPERTY_ERROR = "error";
  @JsonProperty(JSON_PROPERTY_ERROR)
  private Ga4ghBeaconError error;

  public static final String JSON_PROPERTY_FREQUENCY = "frequency";
  @JsonProperty(JSON_PROPERTY_FREQUENCY)
  private BigDecimal frequency;

  public static final String JSON_PROPERTY_VARIANT_COUNT = "variantCount";
  @JsonProperty(JSON_PROPERTY_VARIANT_COUNT)
  private Long variantCount;

  public static final String JSON_PROPERTY_CALL_COUNT = "callCount";
  @JsonProperty(JSON_PROPERTY_CALL_COUNT)
  private Long callCount;

  public static final String JSON_PROPERTY_SAMPLE_COUNT = "sampleCount";
  @JsonProperty(JSON_PROPERTY_SAMPLE_COUNT)
  private Long sampleCount;

  public static final String JSON_PROPERTY_NOTE = "note";
  @JsonProperty(JSON_PROPERTY_NOTE)
  private String note;

  public static final String JSON_PROPERTY_EXTERNAL_URL = "externalUrl";
  @JsonProperty(JSON_PROPERTY_EXTERNAL_URL)
  private String externalUrl;

  public static final String JSON_PROPERTY_INFO = "info";
  @JsonProperty(JSON_PROPERTY_INFO)
  private Object info;

  public static final String JSON_PROPERTY_DATASET_HANDOVER = "datasetHandover";
  @JsonProperty(JSON_PROPERTY_DATASET_HANDOVER)
  private List<Ga4ghHandover> datasetHandover = null;

  public Ga4ghBeaconDatasetAlleleResponse datasetId(String datasetId) {
    this.datasetId = datasetId;
    return this;
  }

  /**
   * not provided 
   * @return datasetId
   **/
  @JsonProperty("datasetId")
  @ApiModelProperty(required = true, value = "not provided ")
  @NotNull 
  public String getDatasetId() {
    return datasetId;
  }

  public void setDatasetId(String datasetId) {
    this.datasetId = datasetId;
  }

  public Ga4ghBeaconDatasetAlleleResponse exists(Boolean exists) {
    this.exists = exists;
    return this;
  }

  /**
   * Indicator of whether the given allele was observed in the dataset. This should be non-null, unless there was an error, in which case &#x60;error&#x60; has to be non-null.
   * @return exists
   **/
  @JsonProperty("exists")
  @ApiModelProperty(value = "Indicator of whether the given allele was observed in the dataset. This should be non-null, unless there was an error, in which case `error` has to be non-null.")
  
  public Boolean getExists() {
    return exists;
  }

  public void setExists(Boolean exists) {
    this.exists = exists;
  }

  public Ga4ghBeaconDatasetAlleleResponse error(Ga4ghBeaconError error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   **/
  @JsonProperty("error")
  @ApiModelProperty(value = "")
  @Valid 
  public Ga4ghBeaconError getError() {
    return error;
  }

  public void setError(Ga4ghBeaconError error) {
    this.error = error;
  }

  public Ga4ghBeaconDatasetAlleleResponse frequency(BigDecimal frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Frequency of this allele in the dataset. Between 0 and 1, inclusive. 
   * minimum: 0
   * maximum: 1
   * @return frequency
   **/
  @JsonProperty("frequency")
  @ApiModelProperty(value = "Frequency of this allele in the dataset. Between 0 and 1, inclusive. ")
  @Valid  @DecimalMin("0") @DecimalMax("1")
  public BigDecimal getFrequency() {
    return frequency;
  }

  public void setFrequency(BigDecimal frequency) {
    this.frequency = frequency;
  }

  public Ga4ghBeaconDatasetAlleleResponse variantCount(Long variantCount) {
    this.variantCount = variantCount;
    return this;
  }

  /**
   * Number of times the requested allele has been observed in the  dataset. 
   * minimum: 0
   * @return variantCount
   **/
  @JsonProperty("variantCount")
  @ApiModelProperty(value = "Number of times the requested allele has been observed in the  dataset. ")
   @Min(0L)
  public Long getVariantCount() {
    return variantCount;
  }

  public void setVariantCount(Long variantCount) {
    this.variantCount = variantCount;
  }

  public Ga4ghBeaconDatasetAlleleResponse callCount(Long callCount) {
    this.callCount = callCount;
    return this;
  }

  /**
   * Total number of calls in the dataset. Missing calls are not  included. 
   * minimum: 0
   * @return callCount
   **/
  @JsonProperty("callCount")
  @ApiModelProperty(value = "Total number of calls in the dataset. Missing calls are not  included. ")
   @Min(0L)
  public Long getCallCount() {
    return callCount;
  }

  public void setCallCount(Long callCount) {
    this.callCount = callCount;
  }

  public Ga4ghBeaconDatasetAlleleResponse sampleCount(Long sampleCount) {
    this.sampleCount = sampleCount;
    return this;
  }

  /**
   * Number of samples in the dataset where the requested allele is  found. 
   * minimum: 0
   * @return sampleCount
   **/
  @JsonProperty("sampleCount")
  @ApiModelProperty(value = "Number of samples in the dataset where the requested allele is  found. ")
   @Min(0L)
  public Long getSampleCount() {
    return sampleCount;
  }

  public void setSampleCount(Long sampleCount) {
    this.sampleCount = sampleCount;
  }

  public Ga4ghBeaconDatasetAlleleResponse note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Additional note or description of the response. 
   * @return note
   **/
  @JsonProperty("note")
  @ApiModelProperty(value = "Additional note or description of the response. ")
  
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }

  public Ga4ghBeaconDatasetAlleleResponse externalUrl(String externalUrl) {
    this.externalUrl = externalUrl;
    return this;
  }

  /**
   * URL to an external system, such as a secured beacon or a system providing more information about a given allele (RFC 3986 format).
   * @return externalUrl
   **/
  @JsonProperty("externalUrl")
  @ApiModelProperty(value = "URL to an external system, such as a secured beacon or a system providing more information about a given allele (RFC 3986 format).")
  
  public String getExternalUrl() {
    return externalUrl;
  }

  public void setExternalUrl(String externalUrl) {
    this.externalUrl = externalUrl;
  }

  public Ga4ghBeaconDatasetAlleleResponse info(Object info) {
    this.info = info;
    return this;
  }

  /**
   * Additional unspecified metadata about the dataset response or its  content. 
   * @return info
   **/
  @JsonProperty("info")
  @ApiModelProperty(example = "{\"additionalInfoKey1\":[\"additionalInfoValue1\",\"additionalInfoValue2]\"],\"additionalInfoKey2\":\"additionalInfoValue3\"}", value = "Additional unspecified metadata about the dataset response or its  content. ")
  @Valid 
  public Object getInfo() {
    return info;
  }

  public void setInfo(Object info) {
    this.info = info;
  }

  public Ga4ghBeaconDatasetAlleleResponse datasetHandover(List<Ga4ghHandover> datasetHandover) {
    this.datasetHandover = datasetHandover;
    return this;
  }

  public Ga4ghBeaconDatasetAlleleResponse addDatasetHandoverItem(Ga4ghHandover datasetHandoverItem) {
    if (this.datasetHandover == null) {
      this.datasetHandover = new ArrayList<Ga4ghHandover>();
    }
    this.datasetHandover.add(datasetHandoverItem);
    return this;
  }

  /**
   * Get datasetHandover
   * @return datasetHandover
   **/
  @JsonProperty("datasetHandover")
  @ApiModelProperty(value = "")
  @Valid 
  public List<Ga4ghHandover> getDatasetHandover() {
    return datasetHandover;
  }

  public void setDatasetHandover(List<Ga4ghHandover> datasetHandover) {
    this.datasetHandover = datasetHandover;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ga4ghBeaconDatasetAlleleResponse beaconDatasetAlleleResponse = (Ga4ghBeaconDatasetAlleleResponse) o;
    return Objects.equals(this.datasetId, beaconDatasetAlleleResponse.datasetId) &&
        Objects.equals(this.exists, beaconDatasetAlleleResponse.exists) &&
        Objects.equals(this.error, beaconDatasetAlleleResponse.error) &&
        Objects.equals(this.frequency, beaconDatasetAlleleResponse.frequency) &&
        Objects.equals(this.variantCount, beaconDatasetAlleleResponse.variantCount) &&
        Objects.equals(this.callCount, beaconDatasetAlleleResponse.callCount) &&
        Objects.equals(this.sampleCount, beaconDatasetAlleleResponse.sampleCount) &&
        Objects.equals(this.note, beaconDatasetAlleleResponse.note) &&
        Objects.equals(this.externalUrl, beaconDatasetAlleleResponse.externalUrl) &&
        Objects.equals(this.info, beaconDatasetAlleleResponse.info) &&
        Objects.equals(this.datasetHandover, beaconDatasetAlleleResponse.datasetHandover);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasetId, exists, error, frequency, variantCount, callCount, sampleCount, note, externalUrl, info, datasetHandover);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ga4ghBeaconDatasetAlleleResponse {\n");

    sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
    sb.append("    exists: ").append(toIndentedString(exists)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    variantCount: ").append(toIndentedString(variantCount)).append("\n");
    sb.append("    callCount: ").append(toIndentedString(callCount)).append("\n");
    sb.append("    sampleCount: ").append(toIndentedString(sampleCount)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    externalUrl: ").append(toIndentedString(externalUrl)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    datasetHandover: ").append(toIndentedString(datasetHandover)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

