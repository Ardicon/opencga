library(opencgaR)
install.packages(miniUI)
install.packages("miniUI")
library(opencgaR)
ls()
library(opencgaR)
base <- "http://localhost:8080/opencga/webservices/rest/v1"
cga <- OpencgaLogin(baseurl=base, userid = "mano", passwd = '1234')
cga <- OpencgaLogin(baseurl=base, userid = "user1", passwd = "user1_pass')
cga
res1 <- OpencgaStudy(object = cga, id = 2, action = "files")
# cga <- OpencgaLogin(baseurl = base,interactive = T)
userProj <- OpencgaUser(cga, category = "user", id="mano",action = "projects")
sampledata <- OpencgaStudy(object = cga, id = 2, action = "samples")
studyFiles <- OpencgaStudy(object = cga, id = 2, action = "files")
studyInfo <- OpencgaStudy(object = cga, id = 2, action = "info")
userinfo <- OpencgaUser(object = cga, id = "mano", action = "info")
### fetch variants from a file
# get all the variants
system.time({
test <- OpencgaFiles(object = cga, id = 60, action = "variants")
})
# construct a variantParam
filt <- cgaVariantParam(region = "1:10522:17522")
#
system.time({
filteredVars <- OpencgaFiles(cga, id = 60, action = "variants", params = filt)
})
# A test to create a new project
# get the neccessary help
proj <- getOpencgaDocs(category = "projects", action = "create", requiredOnly = T)
# Hope
hop <- OpencgaProjects(object = cga, id = NULL, action = "create", params = NULL,
name="Sudan" ,alias="Sudanese", organization="Opencb")
# Another test
hop2 <- OpencgaProjects(object = cga, action = "create",  name="Sudan2" ,
alias="Sudanese2", organization="Opencb")
#
# create  A New study
# get help on the arguments to create a a study
sth <- getOpencgaDocs(category = "studies", action = "create")
#
newS <- OpencgaStudy(object = cga, id = NULL, action = "create", params = NULL,
name="Sudan_test", alias="test_S", projectId=72)
system.time({
test2 <- OpencgaFiles(object = cga, id = 32, action = "variants")
})
files <- OpencgaStudy(object = cga, id = 3, action = "files")
info <- OpencgaStudy(object = cga, id = 3, action = "info")
samples <- OpencgaStudy(object = cga, id = 3, action = "samples")
filvar <- OpencgaFiles(object = cga, id = 32, action = "variants", params = filt)
summ <- OpencgaStudy(cga, id = 2, action = "summary")
cga <- OpencgaLogin(baseurl=base, userid = "user1", passwd = "user1_pass')
cga
res1 <- OpencgaStudy(object = cga, id = 2, action = "files")
# cga <- OpencgaLogin(baseurl = base,interactive = T)
userProj <- OpencgaUser(cga, category = "user", id="mano",action = "projects")
sampledata <- OpencgaStudy(object = cga, id = 2, action = "samples")
studyFiles <- OpencgaStudy(object = cga, id = 2, action = "files")
studyInfo <- OpencgaStudy(object = cga, id = 2, action = "info")
userinfo <- OpencgaUser(object = cga, id = "mano", action = "info")
### fetch variants from a file
# get all the variants
system.time({
test <- OpencgaFiles(object = cga, id = 60, action = "variants")
})
# construct a variantParam
filt <- cgaVariantParam(region = "1:10522:17522")
#
system.time({
filteredVars <- OpencgaFiles(cga, id = 60, action = "variants", params = filt)
})
# A test to create a new project
# get the neccessary help
proj <- getOpencgaDocs(category = "projects", action = "create", requiredOnly = T)
# Hope
hop <- OpencgaProjects(object = cga, id = NULL, action = "create", params = NULL,
name="Sudan" ,alias="Sudanese", organization="Opencb")
# Another test
hop2 <- OpencgaProjects(object = cga, action = "create",  name="Sudan2" ,
alias="Sudanese2", organization="Opencb")
#
# create  A New study
# get help on the arguments to create a a study
sth <- getOpencgaDocs(category = "studies", action = "create")
#
newS <- OpencgaStudy(object = cga, id = NULL, action = "create", params = NULL,
name="Sudan_test", alias="test_S", projectId=72)
system.time({
test2 <- OpencgaFiles(object = cga, id = 32, action = "variants")
})
files <- OpencgaStudy(object = cga, id = 3, action = "files")
info <- OpencgaStudy(object = cga, id = 3, action = "info")
samples <- OpencgaStudy(object = cga, id = 3, action = "samples")
filvar <- OpencgaFiles(object = cga, id = 32, action = "variants", params = filt)
summ <- OpencgaStudy(cga, id = 2, action = "summary")
cga <- OpencgaLogin(baseurl=base, userid = "user1", passwd = "user1_pass')
cga
res1 <- OpencgaStudy(object = cga, id = 2, action = "files")
# cga <- OpencgaLogin(baseurl = base,interactive = T)
userProj <- OpencgaUser(cga, category = "user", id="mano",action = "projects")
sampledata <- OpencgaStudy(object = cga, id = 2, action = "samples")
studyFiles <- OpencgaStudy(object = cga, id = 2, action = "files")
studyInfo <- OpencgaStudy(object = cga, id = 2, action = "info")
userinfo <- OpencgaUser(object = cga, id = "mano", action = "info")
### fetch variants from a file
# get all the variants
system.time({
test <- OpencgaFiles(object = cga, id = 60, action = "variants")
})
# construct a variantParam
filt <- cgaVariantParam(region = "1:10522:17522")
#
system.time({
filteredVars <- OpencgaFiles(cga, id = 60, action = "variants", params = filt)
})
# A test to create a new project
# get the neccessary help
proj <- getOpencgaDocs(category = "projects", action = "create", requiredOnly = T)
# Hope
hop <- OpencgaProjects(object = cga, id = NULL, action = "create", params = NULL,
name="Sudan" ,alias="Sudanese", organization="Opencb")
# Another test
hop2 <- OpencgaProjects(object = cga, action = "create",  name="Sudan2" ,
alias="Sudanese2", organization="Opencb")
#
# create  A New study
# get help on the arguments to create a a study
sth <- getOpencgaDocs(category = "studies", action = "create")
#
newS <- OpencgaStudy(object = cga, id = NULL, action = "create", params = NULL,
name="Sudan_test", alias="test_S", projectId=72)
system.time({
test2 <- OpencgaFiles(object = cga, id = 32, action = "variants")
})
files <- OpencgaStudy(object = cga, id = 3, action = "files")
info <- OpencgaStudy(object = cga, id = 3, action = "info")
samples <- OpencgaStudy(object = cga, id = 3, action = "samples")
filvar <- OpencgaFiles(object = cga, id = 32, action = "variants", params = filt)
summ <- OpencgaStudy(cga, id = 2, action = "summary")
base <- "http://localhost:8080/opencga/"
cga <- OpencgaLogin(baseurl=base, userid = "user1", passwd = "user1_pass')
""
)
"
"cga <- OpencgaLogin(baseurl=base, userid = "user1", passwd = "user1_pass")
cga <- OpencgaLogin(baseurl=base, userid = "user1", passwd = "user1_pass")
debug(OpencgaLogin)
cga <- OpencgaLogin(baseurl=base, userid = "user1", passwd = "user1_pass")
paste(baseurl,"/users/", userid, "/login","?password=", passwd,
sep="")
cga <- OpencgaLogin(baseurl=base, userid = "user1", passwd = "user1_pass")
paste(baseurl,"/users/", userid, "/login","?password=", passwd,
sep="")
install.packages("RCurl")
cga <- OpencgaLogin(baseurl=base, userid = "user1", passwd = "user1_pass")
library(RCurl)
detach("package:RCurl", unload=TRUE)
install.packages("httr")
library(httr)
cga <- OpencgaLogin(baseurl=base, userid = "user1", passwd = "user1_pass")
baseurl <- paste0(baseurl, "webservices/rest/v1/users/", userid, "/login")
POST(baseurl, body = list(password = passwd), encode = "json")
q <- POST(baseurl, body = list(password = passwd), encode = "json")
q$content
POST(baseurl, body = list(password = passwd), encode = "json")
q <- POST(baseurl, body = list(password = passwd), encode = "json")
str(q)
q$request
q$request$output
content(q)
baseurl <- paste0(baseurl, "webservices/rest/v1/users/", userid, "/login")
query <- POST(baseurl, body = list(password = passwd), encode = "json")
stop_for_status(query)
cga <- OpencgaLogin(baseurl=base, userid = "user1", passwd = "user1_pass")
baseurl <- paste0(baseurl, "webservices/rest/v1/users/", userid, "/login")
query <- POST(baseurl, body = list(password = passwd), encode = "json")
sessionInfo()
cga <- OpencgaLogin(baseurl=base, userid = "user1", passwd = "user1_pass")
baseurl <- paste0(baseurl, "webservices/rest/v1/users/", userid, "/login")
query <- POST(baseurl, body = list(password = passwd), encode = "json")
http_status(query)
warn_for_status(query)
stop_for_status(query)
content(query)
res <- content(query)
res
res <- content(query, as="application/json")
res <- content(query, type="application/json")
res
res <- content(query)
res$response
res$response[[1]]
res$response[[1]]
res$response[[1]]$result
res$response[[1]]$result[[1]]$id
res$response[[1]]$result[[1]]$sessionId
res$response[[1]]$result
library(opencgaR)
library(opencgaR)
base <- "http://localhost:8080/opencga/"
cga <- OpencgaLogin(baseurl=base, userid = "user1", passwd = "user1_pass")
cga
res1 <- OpencgaStudy(object = cga, id = 2, action = "files")
OpencgaLogin(baseurl = base,interactive = T)
paste(baseurl, userid, "login", sep="/")
library(opencgaR)
cga <- OpencgaLogin(host=host, userid = "user1", passwd = "user1_pass")
library(opencgaR)
library(opencgaR)
OpencgaLogin()
OpencgaLogin
library(opencgaR)
host <- "http://localhost:8080/opencga/"
cga <- OpencgaLogin(host=host, userid = "user1", passwd = "user1_pass")
debug()
debug(OpencgaLogin)
cga <- OpencgaLogin(host=host, userid = "user1", passwd = "user1_pass")
paste0(host, "/webservices/rest/", version,"/users/")
baseurl <- paste0(host, "/webservices/rest/", version,"/users/")
paste(baseurl, userid, "login", sep="/")
baseurl <- paste(baseurl, userid, "login", sep="/")
POST(baseurl, body = list(password = passwd), encode = "json")
baseurl <- paste0(host, "webservices/rest/", version,"/users")
baseurl <- paste(baseurl, userid, "login", sep="/")
POST(baseurl, body = list(password = passwd), encode = "json")
library(opencgaR)
host <- "http://localhost:8080/opencga/"
cga <- OpencgaLogin(host=host, userid = "user1", passwd = "user1_pass")
cga
res1 <- OpencgaStudy(object = cga, id = 2, action = "files")
library(opencgaR)
library(opencgaR)
host <- "http://localhost:8080/opencga/"
cga <- OpencgaLogin(host=host, userid = "user1", passwd = "user1_pass")
cga
OpencgaStudy(object = cga, id = 2, action = "info")
debug(OpencgaStudy)
cga <- OpencgaLogin(host=host, userid = "user1", passwd = "user1_pass")
cga
debug(OpencgaStudy)
res1 <- OpencgaStudy(object = cga, id = 2, action = "files")
install.packages("configr")
install.packages("configr")
install.packages("configr")
library(configr)
install.packages("configr")
install.packages("devtools")
devtools::install_github("Miachol/configr")
install.packages("RcppTOML")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("RcppTOML")
install.packages("configr")
conf
a <- list(host=host)
class(a)
class(conf) == list
class(a) == list
class(a) == "list"
names(a)
source("R/.opencgaConfig.R")
names(a)
a <- list(rest=host=host)
a <- list(rest=a)
names(a)a
a
a <- list(host=host)
a <- list(rest=a, version="v1")
a
source("R/.opencgaConfig.R")
library(opencgaR)
a <- list(host=host)
a <- list(rest=a, version="v1")
debug(OpencgaConfig)
OpencgaConfig(a)
library(opencgaR)
a <- list(host=host)
a <- list(rest=a, version="v1")
debug(readOpencgaConfig)
library(opencgaR)
a <- list(host=host)
a <- list(rest=a, version="v1")
debug(OpencgaReadConfig)
OpencgaReadConfig(a)
a <- "/Users/mbleda/appl/opencga/build/conf/client-configuration.yml"
is.json.file(a)
is.yaml.file(a)
get.config.type(a)
read.config(a)
print(paste("Reading configuration file in", type, "format", sep = " "))
conf.obj <- read.config(conf)
read.config(a)
conf.obj <- read.config(a)
conf.obj <- read.config(a, warn=F)
conf.obj
read.conf.list(conf.obj)
library(opencgaR)
a <- "/Users/mbleda/appl/opencga/build/conf/client-configuration.yml"
debug(OpencgaReadConfig)
OpencgaReadConfig(a)
library(opencgaR)
a <- "/Users/mbleda/appl/opencga/build/conf/client-configuration.yml"
OpencgaReadConfig(a)
a <- list(host=host)
a <- list(rest=a, version="v1")
OpencgaReadConfig(a)
library(opencgaR)
a <- "/Users/mbleda/appl/opencga/build/conf/client-configuration.yml"
OpencgaReadConfig(a)
devtools::document()
devtools::document()
OpencgaReadConfig(a)
a <- list(host=host)
a <- list(rest=a, version="v1")
OpencgaReadConfig(a)
con <- OpencgaReadConfig(a)
con
library(opencgaR)
a <- list(host=host)
a <- list(rest=a, version="v1")
host <- "http://localhost:8080/opencga/"
a <- list(host=host)
a <- list(rest=a, version="v1")
con <- OpencgaReadConfig(a)
library(opencgaR)
library(opencgaR)
library(opencgaR)
library(opencgaR)
devtools::document()
opencgaR::OpencgaReadConfig()
library(opencgaR)
devtools::document()
vignette("OpencgaReadConfig")
??OpencgaLogin
library(opencgaR)
??OpencgaReadConfig
conf <- list(version="v1",
rest=list(host="http://localhost:8080/opencga/"))
con <- OpencgaReadConfig(conf)
conf <- "/Users/mbleda/appl/opencga/build/conf/client-configuration.yml"
con <- OpencgaReadConfig(conf)
library(opencgaR)
conf <- list(version="v1",
rest=list(host="http://localhost:8080/opencga/"))
con <- OpencgaReadConfig(conf)
conf <- "/Users/mbleda/appl/opencga/build/conf/client-configuration.yml"
con <- OpencgaReadConfig(conf)
con
library(opencgaR)
conf <- list(version="v1",
rest=list(host="http://localhost:8080/opencga/"))
con <- OpencgaReadConfig(conf)
conf <- "/Users/mbleda/appl/opencga/build/conf/client-configuration.yml"
con <- OpencgaReadConfig(conf)
con
library(opencgaR)
con
# Configuration in list format
conf <- list(version="v1",
rest=list(host="http://localhost:8080/opencga/"))
con <- OpencgaReadConfig(conf)
# Configuration in file format ("YAML" or "JSON")
conf <- "/Users/mbleda/appl/opencga/build/conf/client-configuration.yml"
con <- OpencgaReadConfig(conf)
library(opencgaR)
conf <- list(version="v1",
rest=list(host="http://localhost:8080/opencga/"))
con <- OpencgaReadConfig(conf)
library(opencgaR)
conf <- list(version="v1",
rest=list(host="http://localhost:8080/opencga/"))
con <- OpencgaReadConfig(conf)
opencgaR::OpencgaReadConfig(conf = conf)
