/*
* Copyright 2015-2020 OpenCB
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.opencb.opencga.client.rest;

import java.util.List;
import org.opencb.biodata.models.clinical.interpretation.Interpretation;
import org.opencb.biodata.models.clinical.interpretation.ReportedVariant;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.opencga.client.config.ClientConfiguration;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysis;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysisAclUpdateParams;
import org.opencb.opencga.core.models.clinical.ClinicalAnalysisCreateParams;
import org.opencb.opencga.core.models.clinical.ClinicalUpdateParams;
import org.opencb.opencga.core.models.clinical.InterpretationCreateParams;
import org.opencb.opencga.core.models.clinical.InterpretationUpdateParams;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.response.RestResponse;


/**
 * This class contains methods for the Clinical webservices.
 *    Client version: 2.0.0
 *    PATH: analysis/clinical
 *    Autogenerated on: 2020-02-04
 */
public class ClinicalClient extends AbstractParentClient {

    public ClinicalClient(String token, ClientConfiguration configuration) {
        super(token, configuration);
    }

    /**
     * Clinical analysis info.
     * @param clinicalAnalyses Comma separated list of clinical analysis IDs or names up to a maximum of 100.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       clinicalAnalyses: Comma separated list of clinical analysis IDs or names up to a maximum of 100.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ClinicalAnalysis> info(String clinicalAnalyses, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("analysis/clinical", clinicalAnalyses, null, null, "info", params, GET, ClinicalAnalysis.class);
    }

    /**
     * Returns the acl of the clinical analyses. If member is provided, it will only return the acl for the member.
     * @param clinicalAnalyses Comma separated list of clinical analysis IDs or names up to a maximum of 100.
     * @param params Map containing any of the following optional parameters.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       member: User or group id.
     *       silent: Boolean to retrieve all possible entries that are queried for, false to raise an exception whenever one of the entries
     *            looked for cannot be shown for whichever reason.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ObjectMap> acl(String clinicalAnalyses, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("analysis/clinical", clinicalAnalyses, null, null, "acl", params, GET, ObjectMap.class);
    }

    /**
     * Update the set of permissions granted for the member.
     * @param members Comma separated list of user or group ids.
     * @param data JSON containing the parameters to add ACLs.
     * @param params Map containing any of the following optional parameters.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ObjectMap> updateAcl(String members, ClinicalAnalysisAclUpdateParams data, ObjectMap params)
            throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("analysis/clinical", members, null, null, "update", params, POST, ObjectMap.class);
    }

    /**
     * Add or remove Interpretations to/from a Clinical Analysis.
     * @param clinicalAnalysis Clinical analysis ID.
     * @param data JSON containing clinical analysis information.
     * @param params Map containing any of the following optional parameters.
     *       clinicalAnalysis: Clinical analysis ID.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       action: Action to be performed if the array of interpretations is being updated.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ClinicalAnalysis> updateInterpretations(String clinicalAnalysis, InterpretationCreateParams data, ObjectMap params)
            throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("analysis/clinical", clinicalAnalysis, "interpretations", null, "update", params, POST, ClinicalAnalysis.class);
    }

    /**
     * Update comments of an Interpretation.
     * @param clinicalAnalysis Clinical analysis id.
     * @param interpretation Interpretation id.
     * @param data JSON containing a list of comments.
     * @param params Map containing any of the following optional parameters.
     *       study: [[user@]project:]study id.
     *       clinicalAnalysis: Clinical analysis id.
     *       interpretation: Interpretation id.
     *       action: Action to be performed.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Interpretation> updateComments(String clinicalAnalysis, String interpretation, List data, ObjectMap params)
            throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("analysis/clinical", clinicalAnalysis, "interpretations", interpretation, "comments/update", params, POST,
                Interpretation.class);
    }

    /**
     * Update reported variants of an interpretation.
     * @param clinicalAnalysis Clinical analysis id.
     * @param interpretation Interpretation id.
     * @param data JSON containing a list of reported variants.
     * @param params Map containing any of the following optional parameters.
     *       study: [[user@]project:]study id.
     *       clinicalAnalysis: Clinical analysis id.
     *       interpretation: Interpretation id.
     *       action: Action to be performed.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Interpretation> updatePrimaryFindings(String clinicalAnalysis, String interpretation, List data, ObjectMap params)
            throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("analysis/clinical", clinicalAnalysis, "interpretations", interpretation, "primaryFindings/update", params, POST,
                Interpretation.class);
    }

    /**
     * Clinical interpretation analysis.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       limit: Number of results to be returned.
     *       skip: Number of results to skip.
     *       count: Get the total number of results matching the query. Deactivated by default.
     *       sort: Sort the results.
     *       summary: Fast fetch of main variant parameters.
     *       approximateCount: Get an approximate count, instead of an exact total count. Reduces execution time.
     *       approximateCountSamplingSize: Sampling size to get the approximate count. Larger values increase accuracy but also increase
     *            execution time.
     *       id: List of IDs, these can be rs IDs (dbSNP) or variants in the format chrom:start:ref:alt, e.g. rs116600158,19:7177679:C:T.
     *       region: List of regions, these can be just a single chromosome name or regions in the format chr:start-end, e.g.:
     *            2,3:100000-200000.
     *       type: Clinical analysis type, e.g. DUO, TRIO, ...
     *       reference: Reference allele.
     *       alternate: Main alternate allele.
     *       project: Project [user@]project where project can be either the ID or the alias.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       file: Filter variants from the files specified. This will set includeFile parameter when not provided.
     *       filter: Specify the FILTER for any of the files. If 'file' filter is provided, will match the file and the filter. e.g.:
     *            PASS,LowGQX.
     *       qual: Specify the QUAL for any of the files. If 'file' filter is provided, will match the file and the qual. e.g.: >123.4.
     *       info: Filter by INFO attributes from file. [{file}:]{key}{op}{value}[,;]* . If no file is specified, will use all files from
     *            "file" filter. e.g. AN>200 or file_1.vcf:AN>200;file_2.vcf:AN<10 . Many INFO fields can be combined. e.g.
     *            file_1.vcf:AN>200;DB=true;file_2.vcf:AN<10.
     *       sample: Filter variants where the samples contain the variant (HET or HOM_ALT). Accepts AND (;) and OR (,) operators. This
     *            will automatically set 'includeSample' parameter when not provided.
     *       genotype: Samples with a specific genotype: {samp_1}:{gt_1}(,{gt_n})*(;{samp_n}:{gt_1}(,{gt_n})*)* e.g.
     *            HG0097:0/0;HG0098:0/1,1/1. Unphased genotypes (e.g. 0/1, 1/1) will also include phased genotypes (e.g. 0|1, 1|0, 1|1),
     *            but not vice versa. When filtering by multi-allelic genotypes, any secondary allele will match, regardless of its
     *            position e.g. 1/2 will match with genotypes 1/2, 1/3, 1/4, .... Genotype aliases accepted: HOM_REF, HOM_ALT, HET,
     *            HET_REF, HET_ALT and MISS  e.g. HG0097:HOM_REF;HG0098:HET_REF,HOM_ALT. This will automatically set 'includeSample'
     *            parameter when not provided.
     *       format: Filter by any FORMAT field from samples. [{sample}:]{key}{op}{value}[,;]* . If no sample is specified, will use all
     *            samples from "sample" or "genotype" filter. e.g. DP>200 or HG0097:DP>200,HG0098:DP<10 . Many FORMAT fields can be
     *            combined. e.g. HG0097:DP>200;GT=1/1,0/1,HG0098:DP<10.
     *       sampleAnnotation: Selects some samples using metadata information from Catalog. e.g.
     *            age>20;phenotype=hpo:123,hpo:456;name=smith.
     *       sampleMetadata: Return the samples metadata group by study. Sample names will appear in the same order as their corresponding
     *            genotypes.
     *       unknownGenotype: Returned genotype for unknown genotypes. Common values: [0/0, 0|0, ./.].
     *       sampleLimit: Limit the number of samples to be included in the result.
     *       sampleSkip: Skip some samples from the result. Useful for sample pagination.
     *       cohort: Select variants with calculated stats for the selected cohorts.
     *       cohortStatsRef: Reference Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
     *       cohortStatsAlt: Alternate Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
     *       cohortStatsMaf: Minor Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
     *       cohortStatsMgf: Minor Genotype Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
     *       missingAlleles: Number of missing alleles: [{study:}]{cohort}[<|>|<=|>=]{number}.
     *       missingGenotypes: Number of missing genotypes: [{study:}]{cohort}[<|>|<=|>=]{number}.
     *       score: Filter by variant score: [{study:}]{score}[<|>|<=|>=]{number}.
     *       includeStudy: List of studies to include in the result. Accepts 'all' and 'none'.
     *       includeFile: List of files to be returned. Accepts 'all' and 'none'.
     *       includeSample: List of samples to be included in the result. Accepts 'all' and 'none'.
     *       includeFormat: List of FORMAT names from Samples Data to include in the output. e.g: DP,AD. Accepts 'all' and 'none'.
     *       includeGenotype: Include genotypes, apart of other formats defined with includeFormat.
     *       annotationExists: Return only annotated variants.
     *       gene: List of genes, most gene IDs are accepted (HGNC, Ensembl gene, ...). This is an alias to 'xref' parameter.
     *       ct: List of SO consequence types, e.g. missense_variant,stop_lost or SO:0001583,SO:0001578.
     *       xref: List of any external reference, these can be genes, proteins or variants. Accepted IDs include HGNC, Ensembl genes,
     *            dbSNP, ClinVar, HPO, Cosmic, ...
     *       biotype: List of biotypes, e.g. protein_coding.
     *       proteinSubstitution: Protein substitution scores include SIFT and PolyPhen. You can query using the score
     *            {protein_score}[<|>|<=|>=]{number} or the description {protein_score}[~=|=]{description} e.g. polyphen>0.1,sift=tolerant.
     *       conservation: Filter by conservation score: {conservation_score}[<|>|<=|>=]{number} e.g. phastCons>0.5,phylop<0.1,gerp>0.1.
     *       populationFrequencyAlt: Alternate Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01.
     *       populationFrequencyRef: Reference Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01.
     *       populationFrequencyMaf: Population minor allele frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01.
     *       transcriptFlag: List of transcript annotation flags. e.g. CCDS, basic, cds_end_NF, mRNA_end_NF, cds_start_NF, mRNA_start_NF,
     *            seleno.
     *       geneTraitId: List of gene trait association id. e.g. "umls:C0007222" , "OMIM:269600".
     *       go: List of GO (Gene Ontology) terms. e.g. "GO:0002020".
     *       expression: List of tissues of interest. e.g. "lung".
     *       proteinKeyword: List of Uniprot protein variant annotation keywords.
     *       drug: List of drug names.
     *       functionalScore: Functional score: {functional_score}[<|>|<=|>=]{number} e.g. cadd_scaled>5.2 , cadd_raw<=0.3.
     *       clinicalSignificance: Clinical significance: benign, likely_benign, likely_pathogenic, pathogenic.
     *       customAnnotation: Custom annotation: {key}[<|>|<=|>=]{number} or {key}[~=|=]{text}.
     *       trait: List of traits, based on ClinVar, HPO, COSMIC, i.e.: IDs, histologies, descriptions,...
     *       field: Facet field for categorical fields.
     *       fieldRange: Facet field range for continuous fields.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       clinicalAnalysisId: Clinical analysis ID.
     *       disease: Disease (HPO term).
     *       familyId: Family ID.
     *       subjectIds: Comma separated list of subject IDs.
     *       type: Clinical analysis type, e.g. DUO, TRIO, ...
     *       panelId: Panel ID.
     *       panelVersion: Panel version.
     *       save: Save interpretation in Catalog.
     *       interpretationId: ID of the stored interpretation.
     *       interpretationName: Name of the stored interpretation.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ObjectMap> statsInterpretation(ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("analysis/clinical", null, "interpretation", null, "stats", params, GET, ObjectMap.class);
    }

    /**
     * TEAM interpretation analysis.
     * @param params Map containing any of the following optional parameters.
     *       includeLowCoverage: Include low coverage regions.
     *       maxLowCoverage: Max. low coverage.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       clinicalAnalysisId: Clinical analysis ID.
     *       panelIds: Comma separated list of disease panel IDs.
     *       familySegregation: Filter by mode of inheritance from a given family. Accepted values: [ monoallelic,
     *            monoallelicIncompletePenetrance, biallelic, biallelicIncompletePenetrance, XlinkedBiallelic, XlinkedMonoallelic, Ylinked,
     *            MendelianError, DeNovo, CompoundHeterozygous ].
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Job> runInterpretationTeam(ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("analysis/clinical", null, "interpretation/team", null, "run", params, POST, Job.class);
    }

    /**
     * GEL Tiering interpretation analysis.
     * @param params Map containing any of the following optional parameters.
     *       includeLowCoverage: Include low coverage regions.
     *       maxLowCoverage: Max. low coverage.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       clinicalAnalysisId: Clinical analysis ID.
     *       panelIds: Comma separated list of disease panel IDs.
     *       penetrance: Penetrance.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Job> runInterpretationTiering(ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("analysis/clinical", null, "interpretation/tiering", null, "run", params, POST, Job.class);
    }

    /**
     * Interpretation custom analysis.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       limit: Number of results to be returned.
     *       skip: Number of results to skip.
     *       skip: Number of results to skip.
     *       sort: Sort the results.
     *       summary: Fast fetch of main variant parameters.
     *       includeLowCoverage: Include low coverage regions.
     *       maxLowCoverage: Max. low coverage.
     *       skipUntieredVariants: Skip variants without tier assigned.
     *       id: List of IDs, these can be rs IDs (dbSNP) or variants in the format chrom:start:ref:alt, e.g. rs116600158,19:7177679:C:T.
     *       region: List of regions, these can be just a single chromosome name or regions in the format chr:start-end, e.g.:
     *            2,3:100000-200000.
     *       type: List of types, accepted values are SNV, MNV, INDEL, SV, CNV, INSERTION, DELETION, e.g. SNV,INDEL.
     *       reference: Reference allele.
     *       alternate: Main alternate allele.
     *       project: Project [user@]project where project can be either the ID or the alias.
     *       file: Filter variants from the files specified. This will set includeFile parameter when not provided.
     *       filter: Specify the FILTER for any of the files. If 'file' filter is provided, will match the file and the filter. e.g.:
     *            PASS,LowGQX.
     *       qual: Specify the QUAL for any of the files. If 'file' filter is provided, will match the file and the qual. e.g.: >123.4.
     *       info: Filter by INFO attributes from file. [{file}:]{key}{op}{value}[,;]* . If no file is specified, will use all files from
     *            "file" filter. e.g. AN>200 or file_1.vcf:AN>200;file_2.vcf:AN<10 . Many INFO fields can be combined. e.g.
     *            file_1.vcf:AN>200;DB=true;file_2.vcf:AN<10.
     *       sample: Filter variants where the samples contain the variant (HET or HOM_ALT). Accepts AND (;) and OR (,) operators. This
     *            will automatically set 'includeSample' parameter when not provided.
     *       genotype: Samples with a specific genotype: {samp_1}:{gt_1}(,{gt_n})*(;{samp_n}:{gt_1}(,{gt_n})*)* e.g.
     *            HG0097:0/0;HG0098:0/1,1/1. Unphased genotypes (e.g. 0/1, 1/1) will also include phased genotypes (e.g. 0|1, 1|0, 1|1),
     *            but not vice versa. When filtering by multi-allelic genotypes, any secondary allele will match, regardless of its
     *            position e.g. 1/2 will match with genotypes 1/2, 1/3, 1/4, .... Genotype aliases accepted: HOM_REF, HOM_ALT, HET,
     *            HET_REF, HET_ALT and MISS  e.g. HG0097:HOM_REF;HG0098:HET_REF,HOM_ALT. This will automatically set 'includeSample'
     *            parameter when not provided.
     *       format: Filter by any FORMAT field from samples. [{sample}:]{key}{op}{value}[,;]* . If no sample is specified, will use all
     *            samples from "sample" or "genotype" filter. e.g. DP>200 or HG0097:DP>200,HG0098:DP<10 . Many FORMAT fields can be
     *            combined. e.g. HG0097:DP>200;GT=1/1,0/1,HG0098:DP<10.
     *       sampleAnnotation: Selects some samples using metadata information from Catalog. e.g.
     *            age>20;phenotype=hpo:123,hpo:456;name=smith.
     *       sampleMetadata: Return the samples metadata group by study. Sample names will appear in the same order as their corresponding
     *            genotypes.
     *       unknownGenotype: Returned genotype for unknown genotypes. Common values: [0/0, 0|0, ./.].
     *       sampleLimit: Limit the number of samples to be included in the result.
     *       sampleSkip: Skip some samples from the result. Useful for sample pagination.
     *       cohort: Select variants with calculated stats for the selected cohorts.
     *       cohortStatsRef: Reference Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
     *       cohortStatsAlt: Alternate Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
     *       cohortStatsMaf: Minor Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
     *       cohortStatsMgf: Minor Genotype Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
     *       missingAlleles: Number of missing alleles: [{study:}]{cohort}[<|>|<=|>=]{number}.
     *       missingGenotypes: Number of missing genotypes: [{study:}]{cohort}[<|>|<=|>=]{number}.
     *       score: Filter by variant score: [{study:}]{score}[<|>|<=|>=]{number}.
     *       family: Filter variants where any of the samples from the given family contains the variant (HET or HOM_ALT).
     *       familyDisorder: Specify the disorder to use for the family segregation.
     *       familySegregation: Filter by mode of inheritance from a given family. Accepted values: [ monoallelic,
     *            monoallelicIncompletePenetrance, biallelic, biallelicIncompletePenetrance, XlinkedBiallelic, XlinkedMonoallelic, Ylinked,
     *            MendelianError, DeNovo, CompoundHeterozygous ].
     *       familyMembers: Sub set of the members of a given family.
     *       familyProband: Specify the proband child to use for the family segregation.
     *       penetrance: Penetrance.
     *       includeStudy: List of studies to include in the result. Accepts 'all' and 'none'.
     *       includeFile: List of files to be returned. Accepts 'all' and 'none'.
     *       includeSample: List of samples to be included in the result. Accepts 'all' and 'none'.
     *       includeFormat: List of FORMAT names from Samples Data to include in the output. e.g: DP,AD. Accepts 'all' and 'none'.
     *       includeGenotype: Include genotypes, apart of other formats defined with includeFormat.
     *       annotationExists: Return only annotated variants.
     *       gene: List of genes, most gene IDs are accepted (HGNC, Ensembl gene, ...). This is an alias to 'xref' parameter.
     *       ct: List of SO consequence types, e.g. missense_variant,stop_lost or SO:0001583,SO:0001578.
     *       xref: List of any external reference, these can be genes, proteins or variants. Accepted IDs include HGNC, Ensembl genes,
     *            dbSNP, ClinVar, HPO, Cosmic, ...
     *       biotype: List of biotypes, e.g. protein_coding.
     *       proteinSubstitution: Protein substitution scores include SIFT and PolyPhen. You can query using the score
     *            {protein_score}[<|>|<=|>=]{number} or the description {protein_score}[~=|=]{description} e.g. polyphen>0.1,sift=tolerant.
     *       conservation: Filter by conservation score: {conservation_score}[<|>|<=|>=]{number} e.g. phastCons>0.5,phylop<0.1,gerp>0.1.
     *       populationFrequencyAlt: Alternate Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01.
     *       populationFrequencyRef: Reference Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01.
     *       populationFrequencyMaf: Population minor allele frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01.
     *       transcriptFlag: List of transcript annotation flags. e.g. CCDS, basic, cds_end_NF, mRNA_end_NF, cds_start_NF, mRNA_start_NF,
     *            seleno.
     *       geneTraitId: List of gene trait association id. e.g. "umls:C0007222" , "OMIM:269600".
     *       go: List of GO (Gene Ontology) terms. e.g. "GO:0002020".
     *       expression: List of tissues of interest. e.g. "lung".
     *       proteinKeyword: List of Uniprot protein variant annotation keywords.
     *       drug: List of drug names.
     *       functionalScore: Functional score: {functional_score}[<|>|<=|>=]{number} e.g. cadd_scaled>5.2 , cadd_raw<=0.3.
     *       clinicalSignificance: Clinical significance: benign, likely_benign, likely_pathogenic, pathogenic.
     *       customAnnotation: Custom annotation: {key}[<|>|<=|>=]{number} or {key}[~=|=]{text}.
     *       panel: Filter by genes from the given disease panel.
     *       trait: List of traits, based on ClinVar, HPO, COSMIC, i.e.: IDs, histologies, descriptions,...
     *       clinicalAnalysisId: Clinical analysis ID.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Job> runInterpretationCustom(ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("analysis/clinical", null, "interpretation/custom", null, "run", params, POST, Job.class);
    }

    /**
     * Cancer Tiering interpretation analysis.
     * @param params Map containing any of the following optional parameters.
     *       includeLowCoverage: Include low coverage regions.
     *       maxLowCoverage: Max. low coverage.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       clinicalAnalysisId: Clinical analysis ID.
     *       panelIds: Comma separated list of variant IDs to discard.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Job> runInterpretationCancerTiering(ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("analysis/clinical", null, "interpretation/cancerTiering", null, "run", params, POST, Job.class);
    }

    /**
     * Search for secondary findings for a given query.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       limit: Number of results to be returned.
     *       skip: Number of results to skip.
     *       skip: Number of results to skip.
     *       sort: Sort the results.
     *       summary: Fast fetch of main variant parameters.
     *       skipUntieredVariants: Skip variants without tier assigned.
     *       id: List of IDs, these can be rs IDs (dbSNP) or variants in the format chrom:start:ref:alt, e.g. rs116600158,19:7177679:C:T.
     *       region: List of regions, these can be just a single chromosome name or regions in the format chr:start-end, e.g.:
     *            2,3:100000-200000.
     *       type: List of types, accepted values are SNV, MNV, INDEL, SV, CNV, INSERTION, DELETION, e.g. SNV,INDEL.
     *       reference: Reference allele.
     *       alternate: Main alternate allele.
     *       project: Project [user@]project where project can be either the ID or the alias.
     *       file: Filter variants from the files specified. This will set includeFile parameter when not provided.
     *       filter: Specify the FILTER for any of the files. If 'file' filter is provided, will match the file and the filter. e.g.:
     *            PASS,LowGQX.
     *       qual: Specify the QUAL for any of the files. If 'file' filter is provided, will match the file and the qual. e.g.: >123.4.
     *       info: Filter by INFO attributes from file. [{file}:]{key}{op}{value}[,;]* . If no file is specified, will use all files from
     *            "file" filter. e.g. AN>200 or file_1.vcf:AN>200;file_2.vcf:AN<10 . Many INFO fields can be combined. e.g.
     *            file_1.vcf:AN>200;DB=true;file_2.vcf:AN<10.
     *       sample: Filter variants where the samples contain the variant (HET or HOM_ALT). Accepts AND (;) and OR (,) operators. This
     *            will automatically set 'includeSample' parameter when not provided.
     *       genotype: Samples with a specific genotype: {samp_1}:{gt_1}(,{gt_n})*(;{samp_n}:{gt_1}(,{gt_n})*)* e.g.
     *            HG0097:0/0;HG0098:0/1,1/1. Unphased genotypes (e.g. 0/1, 1/1) will also include phased genotypes (e.g. 0|1, 1|0, 1|1),
     *            but not vice versa. When filtering by multi-allelic genotypes, any secondary allele will match, regardless of its
     *            position e.g. 1/2 will match with genotypes 1/2, 1/3, 1/4, .... Genotype aliases accepted: HOM_REF, HOM_ALT, HET,
     *            HET_REF, HET_ALT and MISS  e.g. HG0097:HOM_REF;HG0098:HET_REF,HOM_ALT. This will automatically set 'includeSample'
     *            parameter when not provided.
     *       format: Filter by any FORMAT field from samples. [{sample}:]{key}{op}{value}[,;]* . If no sample is specified, will use all
     *            samples from "sample" or "genotype" filter. e.g. DP>200 or HG0097:DP>200,HG0098:DP<10 . Many FORMAT fields can be
     *            combined. e.g. HG0097:DP>200;GT=1/1,0/1,HG0098:DP<10.
     *       sampleAnnotation: Selects some samples using metadata information from Catalog. e.g.
     *            age>20;phenotype=hpo:123,hpo:456;name=smith.
     *       sampleMetadata: Return the samples metadata group by study. Sample names will appear in the same order as their corresponding
     *            genotypes.
     *       unknownGenotype: Returned genotype for unknown genotypes. Common values: [0/0, 0|0, ./.].
     *       sampleLimit: Limit the number of samples to be included in the result.
     *       sampleSkip: Skip some samples from the result. Useful for sample pagination.
     *       cohort: Select variants with calculated stats for the selected cohorts.
     *       cohortStatsRef: Reference Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
     *       cohortStatsAlt: Alternate Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
     *       cohortStatsMaf: Minor Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
     *       cohortStatsMgf: Minor Genotype Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
     *       missingAlleles: Number of missing alleles: [{study:}]{cohort}[<|>|<=|>=]{number}.
     *       missingGenotypes: Number of missing genotypes: [{study:}]{cohort}[<|>|<=|>=]{number}.
     *       score: Filter by variant score: [{study:}]{score}[<|>|<=|>=]{number}.
     *       family: Filter variants where any of the samples from the given family contains the variant (HET or HOM_ALT).
     *       familyDisorder: Specify the disorder to use for the family segregation.
     *       familySegregation: Filter by mode of inheritance from a given family. Accepted values: [ monoallelic,
     *            monoallelicIncompletePenetrance, biallelic, biallelicIncompletePenetrance, XlinkedBiallelic, XlinkedMonoallelic, Ylinked,
     *            MendelianError, DeNovo, CompoundHeterozygous ].
     *       familyMembers: Sub set of the members of a given family.
     *       familyProband: Specify the proband child to use for the family segregation.
     *       penetrance: Penetrance.
     *       includeStudy: List of studies to include in the result. Accepts 'all' and 'none'.
     *       includeFile: List of files to be returned. Accepts 'all' and 'none'.
     *       includeSample: List of samples to be included in the result. Accepts 'all' and 'none'.
     *       includeFormat: List of FORMAT names from Samples Data to include in the output. e.g: DP,AD. Accepts 'all' and 'none'.
     *       includeGenotype: Include genotypes, apart of other formats defined with includeFormat.
     *       annotationExists: Return only annotated variants.
     *       gene: List of genes, most gene IDs are accepted (HGNC, Ensembl gene, ...). This is an alias to 'xref' parameter.
     *       ct: List of SO consequence types, e.g. missense_variant,stop_lost or SO:0001583,SO:0001578.
     *       xref: List of any external reference, these can be genes, proteins or variants. Accepted IDs include HGNC, Ensembl genes,
     *            dbSNP, ClinVar, HPO, Cosmic, ...
     *       biotype: List of biotypes, e.g. protein_coding.
     *       proteinSubstitution: Protein substitution scores include SIFT and PolyPhen. You can query using the score
     *            {protein_score}[<|>|<=|>=]{number} or the description {protein_score}[~=|=]{description} e.g. polyphen>0.1,sift=tolerant.
     *       conservation: Filter by conservation score: {conservation_score}[<|>|<=|>=]{number} e.g. phastCons>0.5,phylop<0.1,gerp>0.1.
     *       populationFrequencyAlt: Alternate Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01.
     *       populationFrequencyRef: Reference Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01.
     *       populationFrequencyMaf: Population minor allele frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01.
     *       transcriptFlag: List of transcript annotation flags. e.g. CCDS, basic, cds_end_NF, mRNA_end_NF, cds_start_NF, mRNA_start_NF,
     *            seleno.
     *       geneTraitId: List of gene trait association id. e.g. "umls:C0007222" , "OMIM:269600".
     *       go: List of GO (Gene Ontology) terms. e.g. "GO:0002020".
     *       expression: List of tissues of interest. e.g. "lung".
     *       proteinKeyword: List of Uniprot protein variant annotation keywords.
     *       drug: List of drug names.
     *       functionalScore: Functional score: {functional_score}[<|>|<=|>=]{number} e.g. cadd_scaled>5.2 , cadd_raw<=0.3.
     *       clinicalSignificance: Clinical significance: benign, likely_benign, likely_pathogenic, pathogenic.
     *       customAnnotation: Custom annotation: {key}[<|>|<=|>=]{number} or {key}[~=|=]{text}.
     *       panel: Filter by genes from the given disease panel.
     *       trait: List of traits, based on ClinVar, HPO, COSMIC, i.e.: IDs, histologies, descriptions,...
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ReportedVariant> primaryFindingsInterpretation(ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("analysis/clinical", null, "interpretation", null, "primaryFindings", params, GET, ReportedVariant.class);
    }

    /**
     * Search for secondary findings for a given sample.
     * @param params Map containing any of the following optional parameters.
     *       sample: Sample id.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ReportedVariant> secondaryFindingsInterpretation(ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("analysis/clinical", null, "interpretation", null, "secondaryFindings", params, GET, ReportedVariant.class);
    }

    /**
     * Index clinical analysis interpretations in the clinical variant database.
     * @param params Map containing any of the following optional parameters.
     *       interpretationId: Comma separated list of interpretation IDs to be indexed in the clinical variant database.
     *       clinicalAnalysisId: Comma separated list of clinical analysis IDs to be indexed in the clinical variant database.
     *       false: Reset the clinical variant database and import the specified interpretations.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ObjectMap> indexInterpretation(ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("analysis/clinical", null, "interpretation", null, "index", params, GET, ObjectMap.class);
    }

    /**
     * Update clinical analysis attributes.
     * @param clinicalAnalyses Comma separated list of clinical analysis ids.
     * @param data JSON containing clinical analysis information.
     * @param params Map containing any of the following optional parameters.
     *       clinicalAnalyses: Comma separated list of clinical analysis ids.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ClinicalAnalysis> update(String clinicalAnalyses, ClinicalUpdateParams data, ObjectMap params)
            throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("analysis/clinical", clinicalAnalyses, null, null, "update", params, POST, ClinicalAnalysis.class);
    }

    /**
     * Update Interpretation fields.
     * @param clinicalAnalysis Clinical analysis id.
     * @param interpretation Interpretation id.
     * @param data JSON containing clinical interpretation information.
     * @param params Map containing any of the following optional parameters.
     *       study: [[user@]project:]study id.
     *       clinicalAnalysis: Clinical analysis id.
     *       interpretation: Interpretation id.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<Interpretation> updateInterpretation(String clinicalAnalysis, String interpretation, InterpretationUpdateParams
        data, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("analysis/clinical", clinicalAnalysis, "interpretations", interpretation, "update", params, POST,
                Interpretation.class);
    }

    /**
     * Create a new clinical analysis.
     * @param data JSON containing clinical analysis information.
     * @param params Map containing any of the following optional parameters.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ClinicalAnalysis> create(ClinicalAnalysisCreateParams data, ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        params.put("body", data);
        return execute("analysis/clinical", null, null, null, "create", params, POST, ClinicalAnalysis.class);
    }

    /**
     * Query for reported variants.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       limit: Number of results to be returned.
     *       skip: Number of results to skip.
     *       count: Get the total number of results matching the query. Deactivated by default.
     *       sort: Sort the results.
     *       summary: Fast fetch of main variant parameters.
     *       approximateCount: Get an approximate count, instead of an exact total count. Reduces execution time.
     *       approximateCountSamplingSize: Sampling size to get the approximate count. Larger values increase accuracy but also increase
     *            execution time.
     *       id: List of IDs, these can be rs IDs (dbSNP) or variants in the format chrom:start:ref:alt, e.g. rs116600158,19:7177679:C:T.
     *       region: List of regions, these can be just a single chromosome name or regions in the format chr:start-end, e.g.:
     *            2,3:100000-200000.
     *       type: List of types, accepted values are SNV, MNV, INDEL, SV, CNV, INSERTION, DELETION, e.g. SNV,INDEL.
     *       reference: Reference allele.
     *       alternate: Main alternate allele.
     *       project: Project [user@]project where project can be either the ID or the alias.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       file: Filter variants from the files specified. This will set includeFile parameter when not provided.
     *       filter: Specify the FILTER for any of the files. If 'file' filter is provided, will match the file and the filter. e.g.:
     *            PASS,LowGQX.
     *       qual: Specify the QUAL for any of the files. If 'file' filter is provided, will match the file and the qual. e.g.: >123.4.
     *       info: Filter by INFO attributes from file. [{file}:]{key}{op}{value}[,;]* . If no file is specified, will use all files from
     *            "file" filter. e.g. AN>200 or file_1.vcf:AN>200;file_2.vcf:AN<10 . Many INFO fields can be combined. e.g.
     *            file_1.vcf:AN>200;DB=true;file_2.vcf:AN<10.
     *       sample: Filter variants where the samples contain the variant (HET or HOM_ALT). Accepts AND (;) and OR (,) operators. This
     *            will automatically set 'includeSample' parameter when not provided.
     *       genotype: Samples with a specific genotype: {samp_1}:{gt_1}(,{gt_n})*(;{samp_n}:{gt_1}(,{gt_n})*)* e.g.
     *            HG0097:0/0;HG0098:0/1,1/1. Unphased genotypes (e.g. 0/1, 1/1) will also include phased genotypes (e.g. 0|1, 1|0, 1|1),
     *            but not vice versa. When filtering by multi-allelic genotypes, any secondary allele will match, regardless of its
     *            position e.g. 1/2 will match with genotypes 1/2, 1/3, 1/4, .... Genotype aliases accepted: HOM_REF, HOM_ALT, HET,
     *            HET_REF, HET_ALT and MISS  e.g. HG0097:HOM_REF;HG0098:HET_REF,HOM_ALT. This will automatically set 'includeSample'
     *            parameter when not provided.
     *       format: Filter by any FORMAT field from samples. [{sample}:]{key}{op}{value}[,;]* . If no sample is specified, will use all
     *            samples from "sample" or "genotype" filter. e.g. DP>200 or HG0097:DP>200,HG0098:DP<10 . Many FORMAT fields can be
     *            combined. e.g. HG0097:DP>200;GT=1/1,0/1,HG0098:DP<10.
     *       sampleAnnotation: Selects some samples using metadata information from Catalog. e.g.
     *            age>20;phenotype=hpo:123,hpo:456;name=smith.
     *       sampleMetadata: Return the samples metadata group by study. Sample names will appear in the same order as their corresponding
     *            genotypes.
     *       unknownGenotype: Returned genotype for unknown genotypes. Common values: [0/0, 0|0, ./.].
     *       sampleLimit: Limit the number of samples to be included in the result.
     *       sampleSkip: Skip some samples from the result. Useful for sample pagination.
     *       cohort: Select variants with calculated stats for the selected cohorts.
     *       cohortStatsRef: Reference Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
     *       cohortStatsAlt: Alternate Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
     *       cohortStatsMaf: Minor Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
     *       cohortStatsMgf: Minor Genotype Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
     *       missingAlleles: Number of missing alleles: [{study:}]{cohort}[<|>|<=|>=]{number}.
     *       missingGenotypes: Number of missing genotypes: [{study:}]{cohort}[<|>|<=|>=]{number}.
     *       score: Filter by variant score: [{study:}]{score}[<|>|<=|>=]{number}.
     *       includeStudy: List of studies to include in the result. Accepts 'all' and 'none'.
     *       includeFile: List of files to be returned. Accepts 'all' and 'none'.
     *       includeSample: List of samples to be included in the result. Accepts 'all' and 'none'.
     *       includeFormat: List of FORMAT names from Samples Data to include in the output. e.g: DP,AD. Accepts 'all' and 'none'.
     *       includeGenotype: Include genotypes, apart of other formats defined with includeFormat.
     *       annotationExists: Return only annotated variants.
     *       gene: List of genes, most gene IDs are accepted (HGNC, Ensembl gene, ...). This is an alias to 'xref' parameter.
     *       ct: List of SO consequence types, e.g. missense_variant,stop_lost or SO:0001583,SO:0001578.
     *       xref: List of any external reference, these can be genes, proteins or variants. Accepted IDs include HGNC, Ensembl genes,
     *            dbSNP, ClinVar, HPO, Cosmic, ...
     *       biotype: List of biotypes, e.g. protein_coding.
     *       proteinSubstitution: Protein substitution scores include SIFT and PolyPhen. You can query using the score
     *            {protein_score}[<|>|<=|>=]{number} or the description {protein_score}[~=|=]{description} e.g. polyphen>0.1,sift=tolerant.
     *       conservation: Filter by conservation score: {conservation_score}[<|>|<=|>=]{number} e.g. phastCons>0.5,phylop<0.1,gerp>0.1.
     *       populationFrequencyAlt: Alternate Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01.
     *       populationFrequencyRef: Reference Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01.
     *       populationFrequencyMaf: Population minor allele frequency: {study}:{population}[<|>|<=|>=]{number}. e.g. 1kG_phase3:ALL<0.01.
     *       transcriptFlag: List of transcript annotation flags. e.g. CCDS, basic, cds_end_NF, mRNA_end_NF, cds_start_NF, mRNA_start_NF,
     *            seleno.
     *       geneTraitId: List of gene trait association id. e.g. "umls:C0007222" , "OMIM:269600".
     *       go: List of GO (Gene Ontology) terms. e.g. "GO:0002020".
     *       expression: List of tissues of interest. e.g. "lung".
     *       proteinKeyword: List of Uniprot protein variant annotation keywords.
     *       drug: List of drug names.
     *       functionalScore: Functional score: {functional_score}[<|>|<=|>=]{number} e.g. cadd_scaled>5.2 , cadd_raw<=0.3.
     *       clinicalSignificance: Clinical significance: benign, likely_benign, likely_pathogenic, pathogenic.
     *       customAnnotation: Custom annotation: {key}[<|>|<=|>=]{number} or {key}[~=|=]{text}.
     *       trait: List of traits, based on ClinVar, HPO, COSMIC, i.e.: IDs, histologies, descriptions,...
     *       clinicalAnalysisId: List of clinical analysis IDs.
     *       clinicalAnalysisName: List of clinical analysis names.
     *       clinicalAnalysisDescr: Clinical analysis description.
     *       clinicalAnalysisFiles: List of clinical analysis files.
     *       clinicalAnalysisProbandId: List of proband IDs.
     *       clinicalAnalysisProbandDisorders: List of proband disorders.
     *       clinicalAnalysisProbandPhenotypes: List of proband phenotypes.
     *       clinicalAnalysisFamilyId: List of family IDs.
     *       clinicalAnalysisFamMemberIds: List of clinical analysis family member IDs.
     *       interpretationId: List of interpretation IDs.
     *       interpretationSoftwareName: List of interpretation software names.
     *       interpretationSoftwareVersion: List of interpretation software versions.
     *       interpretationAnalystName: List of interpretation analysist names.
     *       interpretationPanels: List of interpretation panels.
     *       interpretationDescription: Interpretation description.
     *       interpretationDependencies: List of interpretation dependency, format: name:version, e.g. cellbase:4.0.
     *       interpretationFilters: List of interpretation filters.
     *       interpretationComments: List of interpretation comments.
     *       interpretationCreationDate: Iinterpretation creation date (including date ranges).
     *       reportedVariantDeNovoQualityScore: List of reported variant de novo quality scores.
     *       reportedVariantComments: List of reported variant comments.
     *       reportedEventPhenotypeNames: List of reported event phenotype names.
     *       reportedEventConsequenceTypeIds: List of reported event consequence type IDs.
     *       reportedEventXrefs: List of reported event phenotype xRefs.
     *       reportedEventPanelIds: List of reported event panel IDs.
     *       reportedEventAcmg: List of reported event ACMG.
     *       reportedEventClinicalSignificance: List of reported event clinical significance.
     *       reportedEventDrugResponse: List of reported event drug response.
     *       reportedEventTraitAssociation: List of reported event trait association.
     *       reportedEventFunctionalEffect: List of reported event functional effect.
     *       reportedEventTumorigenesis: List of reported event tumorigenesis.
     *       reportedEventOtherClassification: List of reported event other classification.
     *       reportedEventRolesInCancer: List of reported event roles in cancer.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ObjectMap> queryInterpretation(ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("analysis/clinical", null, "interpretation", null, "query", params, GET, ObjectMap.class);
    }

    /**
     * Clinical analysis search.
     * @param params Map containing any of the following optional parameters.
     *       include: Fields included in the response, whole JSON path must be provided.
     *       exclude: Fields excluded in the response, whole JSON path must be provided.
     *       limit: Number of results to be returned.
     *       skip: Number of results to skip.
     *       count: Get the total number of results matching the query. Deactivated by default.
     *       study: Study [[user@]project:]study where study and project can be either the ID or UUID.
     *       type: Clinical analysis type.
     *       priority: Priority.
     *       status: Clinical analysis status.
     *       creationDate: Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
     *       modificationDate: Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
     *       dueDate: Due date (Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805...).
     *       description: Description.
     *       family: Family id.
     *       proband: Proband id.
     *       sample: Proband sample.
     *       analystAssignee: Clinical analyst assignee.
     *       disorder: Disorder id or name.
     *       flags: Flags.
     *       release: Release value.
     *       attributes: Text attributes (Format: sex=male,age>20 ...).
     * @return a RestResponse object.
     * @throws ClientException ClientException if there is any server error.
     */
    public RestResponse<ClinicalAnalysis> search(ObjectMap params) throws ClientException {
        params = params != null ? params : new ObjectMap();
        return execute("analysis/clinical", null, null, null, "search", params, GET, ClinicalAnalysis.class);
    }
}
